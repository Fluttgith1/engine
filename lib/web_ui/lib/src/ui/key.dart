// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// @dart = 2.10

part of ui;

/// How the key has changed since the last report.
enum KeyChange {
  /// The key is pressed.
  down,

  /// The key is released.
  up,

  /// The key was pressed at some unknown time before this event.
  ///
  /// This is dispatched because the state is desynchronized, probably due to
  /// loss of focus.
  synchronize,

  /// The key was released at some unknown time before this event, or there is no
  /// way to keep track of a pressed key.
  ///
  /// This can be dispatched because the state is desynchronized, probably due to
  /// loss of focus.
  ///
  /// This can also be dispatched immediately after a [down] event if the platform
  /// provides no way to track the release event of a pressed key.
  cancel,

  /// The key is held, causing a repeated key input.
  repeatedDown,
}

/// Information about the change of a logical key.
class LogicalKeyData {
  /// Creates an object that represents the change of a logical key.
  const LogicalKeyData({
    required this.change,
    required this.key,
    this.character,
  });

  /// How the key has changed since the last report.
  final KeyChange change;

  /// The key code for the logical key that has changed.
  final int key;

  /// The characters generated by the key event.
  ///
  /// This is non-null only (but not necessarily) if [change] is [KeyChange.down]
  /// or [KeyChange.repeatedDown].
  final String? character;

  @override
  String toString() {
    final String strCharacter = character?.isEmpty ?? true ? '' : ', character: $character';
    return 'LogicalKeyData(change: $change, key: $key$strCharacter)';
  }
}

/// Information about the change of a key.
class KeyData {
  /// Creates an object that represents the change of a key.
  const KeyData({
    required this.timeStamp,
    required this.activeLocks,
    required this.change,
    required this.key,
    required this.logicalEvents,
  });

  /// Time of event dispatch, relative to an arbitrary timeline.
  ///
  /// For [KeyChange.synchronize] and [KeyChange.cancel] events, the [timeStamp]
  /// might not be the actual time that the key press or release happens.
  final Duration timeStamp;

  /// The locking state after this event.
  final int activeLocks;

  /// How the key has changed since the last report.
  final KeyChange change;

  /// The key code for the physical key that has changed.
  final int key;

  /// The corresponding logical events.
  final List<LogicalKeyData> logicalEvents;

  @override
  String toString() => 'KeyData(timeStamp: $timeStamp, activeLocks: $activeLocks, change: $change, key: $key, logicalEvents: $logicalEvents)';

  /// Returns a complete textual description of the information in this object.
  String toStringFull() {
    return '$runtimeType('
           ')';
  }
}
