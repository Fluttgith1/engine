import 'dart:io';

import 'package:webdriver/async_io.dart' as async_io;
import 'package:webdriver/support/async.dart';

import 'dart:async';
import 'dart:convert';

import 'message.dart';
import 'package:matcher/matcher.dart';

async_io.WebDriver driver;
void main() async {

  // For web device, WebDriver session will be launched beforehand
  // so that FlutterDriver can reuse it.

  final Browser browser = _browserNameToEnum('ios-safari');
  final String driverPort = '4444';
  // start WebDriver
  try {
    driver = await _createDriver(
      driverPort,
      browser,
      false, // no-headless
    );
  } on Exception catch (ex) {
    print('ex: $ex');
  }

  if (driver == null) {
    print('boooo');
  }
  await driver.get('http://localhost:8080/dom_renderer_test.debug.html');

  Map<String, dynamic> respone = await
      sendCommand(RequestData('null', timeout: Duration(seconds: 5)));
  String testResult = respone['message'] as String;
  print('result: $testResult');
  driver.quit();
  testResult == 'pass' ? exit(0) : exit(1);
}

 Future<Map<String, dynamic>> sendCommand(Command command) async {
    Map<String, dynamic> response;
    final Map<String, String> serialized = command.serialize();
    try {
      final dynamic data = await _sendCommand("window.\$flutterDriver('${jsonEncode(serialized)}')", command.timeout);
      response = jsonDecode(data);
    } catch (error, stackTrace) {
      throw Exception("Failed to respond to $command due to remote error\n : \$flutterDriver('${jsonEncode(serialized)}')",

      );
    }
    return response['response'];
  }

  /// Sends command via WebDriver to Flutter web application
  Future<dynamic> _sendCommand(String script, Duration duration) async {
    dynamic result;
    try {
      await await driver.execute(script, <void>[]);
    } catch (_) {
      // In case there is an exception, do nothing
    }

    try {
      result = await waitFor<dynamic>(
        () => driver.execute(r'return $flutterDriverResult', <String>[]),
        matcher: isNotNull,
        timeout: duration ?? const Duration(days: 30),
      );
    } catch (_) {
      // Returns null if exception thrown.
      return null;
    } finally {
      // Resets the result.
      await driver.execute(r'''
        $flutterDriverResult = null
      ''', <void>[]);
    }
    return result;
  }

/// A Flutter Driver command that sends a string to the application and expects a
/// string response.
class RequestData extends Command {
  /// Create a command that sends a message.
  const RequestData(this.message, {Duration timeout}) : super(timeout: timeout);

  /// Deserializes this command from the value generated by [serialize].
  RequestData.deserialize(Map<String, String> params)
      : message = params['message'],
        super.deserialize(params);

  /// The message being sent from the test to the application.
  final String message;

  @override
  String get kind => 'request_data';

  @override
  bool get requiresRootWidgetAttached => false;

  @override
  Map<String, String> serialize() => super.serialize()
    ..addAll(<String, String>{
      'message': message,
    });
}

// /// A wrapper around static WebDriver creation methods.
// class WebDriverHelper {
//   WebDriverHelper();

//   /// Create a new WebDriver pointing to Chromedriver on the given uri and with
//   /// given desired capabilities.
//   Future<WebDriver> create(int localPort, int chromedriverPort) {
//     final chromeOptions = {'debuggerAddress': 'localhost:$localPort'};
//     final capabilities = Capabilities.chrome;
//     capabilities[Capabilities.chromeOptions] = chromeOptions;
//     return createDriver(
//         desired: capabilities,
//         uri: Uri.parse('http://localhost:$chromedriverPort'));
//   }
// }

/// A list of supported browsers
enum Browser {
  /// Chrome: https://www.google.com/chrome/
  chrome,

  /// Edge: https://www.microsoft.com/en-us/windows/microsoft-edge
  edge,

  /// Firefox: https://www.mozilla.org/en-US/firefox/
  firefox,

  /// Safari in iOS: https://www.apple.com/safari/
  iosSafari,

  /// Safari in macOS: https://www.apple.com/safari/
  safari,
}

/// Converts [browserName] string to [Browser]
Browser _browserNameToEnum(String browserName) {
  switch (browserName) {
    case 'chrome':
      return Browser.chrome;
    case 'edge':
      return Browser.edge;
    case 'firefox':
      return Browser.firefox;
    case 'ios-safari':
      return Browser.iosSafari;
    case 'safari':
      return Browser.safari;
  }
  throw UnsupportedError('Browser $browserName not supported');
}

Future<async_io.WebDriver> _createDriver(
    String driverPort, Browser browser, bool headless) async {
  async_io.WebDriver webDriver = await async_io.createDriver(
      uri: Uri.parse('http://localhost:$driverPort/'),
      desired: getDesiredCapabilities(browser, headless),
      spec: async_io.WebDriverSpec.Auto);
  return webDriver;
}

/// Returns desired capabilities for given [browser] and [headless].
Map<String, dynamic> getDesiredCapabilities(Browser browser, bool headless) {
  switch (browser) {
    case Browser.chrome:
      return <String, dynamic>{
        'acceptInsecureCerts': true,
        'browserName': 'chrome',
        'goog:loggingPrefs': <String, String>{
          async_io.LogType.performance: 'ALL'
        },
        'chromeOptions': <String, dynamic>{
          'w3c': false,
          'args': <String>[
            '--bwsi',
            '--disable-background-timer-throttling',
            '--disable-default-apps',
            '--disable-extensions',
            '--disable-popup-blocking',
            '--disable-translate',
            '--no-default-browser-check',
            '--no-sandbox',
            '--no-first-run',
            if (headless) '--headless'
          ],
          'perfLoggingPrefs': <String, String>{
            'traceCategories': 'devtools.timeline,'
                'v8,blink.console,benchmark,blink,'
                'blink.user_timing'
          }
        }
      };
      break;
    case Browser.firefox:
      return <String, dynamic>{
        'acceptInsecureCerts': true,
        'browserName': 'firefox',
        'moz:firefoxOptions': <String, dynamic>{
          'args': <String>[if (headless) '-headless'],
          'prefs': <String, dynamic>{
            'dom.file.createInChild': true,
            'dom.timeout.background_throttling_max_budget': -1,
            'media.autoplay.default': 0,
            'media.gmp-manager.url': '',
            'media.gmp-provider.enabled': false,
            'network.captive-portal-service.enabled': false,
            'security.insecure_field_warning.contextual.enabled': false,
            'test.currentTimeOffsetSeconds': 11491200
          },
          'log': <String, String>{'level': 'trace'}
        }
      };
      break;
    case Browser.edge:
      return <String, dynamic>{
        'acceptInsecureCerts': true,
        'browserName': 'edge',
      };
      break;
    case Browser.safari:
      return <String, dynamic>{
        'browserName': 'safari',
      };
      break;
    case Browser.iosSafari:
      return <String, dynamic>{
        'platformName': 'ios',
        'browserName': 'safari',
        'safari:useSimulator': true
      };
    default:
      throw UnsupportedError('Browser $browser not supported.');
  }
}
