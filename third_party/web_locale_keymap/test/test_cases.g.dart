//---------------------------------------------------------------------------------------------
//  Copyright (c) 2022 Google LLC
//  Licensed under the MIT License. See License.txt in the project root for license information.
//--------------------------------------------------------------------------------------------*/

// DO NOT EDIT -- DO NOT EDIT -- DO NOT EDIT
//
// This file is auto generated by flutter/engine:flutter/tools/gen_web_keyboard_layouts based on
// https://github.com/microsoft/vscode/tree/@@@COMMIT_ID@@@/src/vs/workbench/services/keybinding/browser/keyboardLayouts
//
// Edit the following files instead:
//
//  - Script: lib/main.dart
//  - Templates: data/*.tmpl
//
// See flutter/engine:flutter/tools/gen_web_keyboard_layouts/README.md for more information.

import 'package:test/test.dart';
import 'package:web_locale_keymap/web_locale_keymap.dart';
import 'testing.dart';

void testWin(LocaleKeymap mapping) {
  group('cz', () {
    verifyEntry(mapping, 'Digit0', <String>[r'é', r'0', r'˝', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'+', r'1', r'~', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'ě', r'2', r'ˇ', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'š', r'3', r'^', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'č', r'4', r'˘', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'ř', r'5', r'°', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'ž', r'6', r'˛', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'ý', r'7', r'`', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'á', r'8', r'˙', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'í', r'9', r'´', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'{', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'&', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'Đ', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'[', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r']', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'ł', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'Ł', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'}', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'\', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'đ', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'@', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'|', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'#', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'z', r'Z', r'', r''], 'Z');
    verifyEntry(mapping, 'KeyZ', <String>[r'y', r'Y', r'', r''], 'Y');
  });

  group('de', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'}', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'²', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'§', r'³', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'{', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'[', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r']', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'@', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'z', r'Z', r'', r''], 'Z');
    verifyEntry(mapping, 'KeyZ', <String>[r'y', r'Y', r'', r''], 'Y');
  });

  group('de-swiss', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'+', r'¦', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'@', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'*', r'#', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'ç', r'°', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'§', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'¬', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'|', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'¢', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r'', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'z', r'Z', r'', r''], 'Z');
    verifyEntry(mapping, 'KeyZ', <String>[r'y', r'Y', r'', r''], 'Y');
  });

  group('dk', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'}', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'@', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'¤', r'$', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'€', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'{', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'[', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r']', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'', r''], 'Z');
  });

  group('en', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'', r''], 'Z');
  });

  group('en-belgian', () {
    verifyEntry(mapping, 'Digit0', <String>[r'à', r'0', r'}', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'&', r'1', r'|', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'é', r'2', r'@', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'"', r'3', r'#', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r"'", r'4', r'{', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'(', r'5', r'[', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'§', r'6', r'^', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'è', r'7', r'', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'!', r'8', r'', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'ç', r'9', r'{', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'q', r'Q', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'z', r'Z', r'', r''], 'Z');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'Semicolon', <String>[r'm', r'M', r'', r''], 'M');
  });

  group('en-in', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'₹', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'', r'ˆ'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'', r'˘'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'ā', r'Ā'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'ḍ', r'Ḍ'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'ē', r'Ē'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'ṅ', r'Ṅ'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'ḥ', r'Ḥ'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'ī', r'Ī'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'l̥', r'L̥'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'ṁ', r'Ṁ'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'ṇ', r'Ṇ'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ō', r'Ō'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'æ', r'Æ'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'r̥', r'R̥'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ś', r'Ś'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'ṭ', r'Ṭ'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'ū', r'Ū'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'ṣ', r'Ṣ'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'ñ', r'Ñ'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'', r''], 'Z');
  });

  group('en-intl', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'’', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'¡', r'¹'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'²', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'³', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¤', r'£'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'€', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'¼', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'½', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'¾', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'‘', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'á', r'Á'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'©', r'¢'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'ð', r'Ð'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'é', r'É'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'í', r'Í'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'ø', r'Ø'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'ñ', r'Ñ'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ó', r'Ó'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'ö', r'Ö'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'ä', r'Ä'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r'§'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'þ', r'Þ'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'ú', r'Ú'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'å', r'Å'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'ü', r'Ü'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'æ', r'Æ'], 'Z');
  });

  group('en-uk', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'£', r'', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'€', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'á', r'Á'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'é', r'É'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'í', r'Í'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ó', r'Ó'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'ú', r'Ú'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'', r''], 'Z');
  });

  group('es', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'|', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'@', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'·', r'#', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'~', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'€', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'¬', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r'', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'', r''], 'Z');
  });

  group('es-latin', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r'', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'@', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'', r''], 'Z');
  });

  group('fr', () {
    verifyEntry(mapping, 'Digit0', <String>[r'à', r'0', r'@', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'&', r'1', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'é', r'2', r'~', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'"', r'3', r'#', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r"'", r'4', r'{', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'(', r'5', r'[', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'-', r'6', r'|', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'è', r'7', r'`', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'_', r'8', r'\', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'ç', r'9', r'^', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'q', r'Q', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'z', r'Z', r'', r''], 'Z');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'Semicolon', <String>[r'm', r'M', r'', r''], 'M');
  });

  group('hu', () {
    verifyEntry(mapping, 'Backquote', <String>[r'0', r'§', r'', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r"'", r'~', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'ˇ', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'+', r'^', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'!', r'˘', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'°', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'/', r'˛', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'=', r'`', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'˙', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r'´', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'ä', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'{', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'&', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'Đ', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'Ä', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'[', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r']', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'Í', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'í', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'ł', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'Ł', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'<', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'}', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'\', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'đ', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'€', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'@', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'|', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'#', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'z', r'Z', r'', r''], 'Z');
    verifyEntry(mapping, 'KeyZ', <String>[r'y', r'Y', r'>', r''], 'Y');
  });

  group('it', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'£', r'', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'€', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r'', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'', r''], 'Z');
  });

  group('no', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'}', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'@', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'¤', r'$', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'€', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'{', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'[', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r']', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'', r''], 'Z');
  });

  group('pl', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'ą', r'Ą'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'ć', r'Ć'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'ę', r'Ę'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'ł', r'Ł'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'ń', r'Ń'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ó', r'Ó'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ś', r'Ś'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'€', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'ź', r'Ź'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'ż', r'Ż'], 'Z');
  });

  group('pt', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'}', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'@', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'§', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'€', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'{', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'[', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r']', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'', r''], 'Z');
  });

  group('pt-br', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'¹', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'²', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'³', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'£', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'¢', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'¨', r'¬', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'₢', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'°', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'/', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'?', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'', r''], 'Z');
  });

  group('ru', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'№', r'', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r';', r'', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r':', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'?', r'', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'₽', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'ф', r'Ф', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'и', r'И', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'с', r'С', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'в', r'В', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'у', r'У', r'', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'а', r'А', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'п', r'П', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'р', r'Р', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'ш', r'Ш', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'о', r'О', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'л', r'Л', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'д', r'Д', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'ь', r'Ь', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'т', r'Т', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'щ', r'Щ', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'з', r'З', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'й', r'Й', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'к', r'К', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r'ы', r'Ы', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r'е', r'Е', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'г', r'Г', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'м', r'М', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'ц', r'Ц', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'ч', r'Ч', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'н', r'Н', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'я', r'Я', r'', r''], 'Z');
  });

  group('sv', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'}', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'@', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'¤', r'$', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'€', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'{', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'[', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r']', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'', r''], 'Z');
  });

  group('thai', () {
    verifyEntry(mapping, 'Digit0', <String>[r'จ', r'๗', r'', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'ๅ', r'+', r'', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'/', r'๑', r'', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'-', r'๒', r'', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'ภ', r'๓', r'', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'ถ', r'๔', r'', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'ุ', r'ู', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'ึ', r'฿', r'', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'ค', r'๕', r'', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'ต', r'๖', r'', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'ฟ', r'ฤ', r'', r''], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'ิ', r'ฺ', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'แ', r'ฉ', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'ก', r'ฏ', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'ำ', r'ฎ', r'', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'ด', r'โ', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'เ', r'ฌ', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'้', r'็', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'ร', r'ณ', r'', r''], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'่', r'๋', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'า', r'ษ', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'ส', r'ศ', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'ท', r'?', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'ื', r'์', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'น', r'ฯ', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'ย', r'ญ', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'ๆ', r'๐', r'', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'พ', r'ฑ', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r'ห', r'ฆ', r'', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r'ะ', r'ธ', r'', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'ี', r'๊', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'อ', r'ฮ', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'ไ', r'"', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'ป', r')', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'ั', r'ํ', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'ผ', r'(', r'', r''], 'Z');
  });

  group('tr', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'}', r''], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'>', r''], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r"'", r'£', r''], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'^', r'#', r''], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'+', r'$', r''], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'½', r''], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'', r''], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'{', r''], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'[', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r']', r''], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'æ', r'Æ'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'', r''], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'', r''], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r''], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r''], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'', r''], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'ı', r'I', r'i', r'İ'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'', r''], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'', r''], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'', r''], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'', r''], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'', r''], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'', r''], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'@', r''], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'', r''], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'₺', r''], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'', r''], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'', r''], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'', r''], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'', r''], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'', r''], 'Z');
  });
}

void testLinux(LocaleKeymap mapping) {
  group('de', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'}', r'°'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'¹', r'¡'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'²', r'⅛'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'§', r'³', r'£'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¼', r'¤'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'½', r'⅜'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'¬', r'⅝'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'{', r'⅞'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'[', r'™'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r']', r'±'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'æ', r'Æ'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'“', r'‘'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'¢', r'©'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'ð', r'Ð'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r'€'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'đ', r'ª'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'ŋ', r'Ŋ'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'ħ', r'Ħ'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'→', r'ı'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'̣', r'̇'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'ĸ', r'&'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'ł', r'Ł'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r'º'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'”', r'’'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'þ', r'Þ'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'@', r'Ω'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'¶', r'®'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ſ', r'ẞ'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'ŧ', r'Ŧ'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'↓', r'↑'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'„', r'‚'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'ł', r'Ł'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'«', r'‹'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'z', r'Z', r'←', r'¥'], 'Z');
    verifyEntry(mapping, 'KeyZ', <String>[r'y', r'Y', r'»', r'›'], 'Y');
  });

  group('en', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'0', r')'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'1', r'!'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'2', r'@'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'3', r'#'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'4', r'$'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'5', r'%'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'6', r'^'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'7', r'&'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'8', r'*'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'9', r'('], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'a', r'A'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'b', r'B'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'c', r'C'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'd', r'D'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'e', r'E'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'f', r'F'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'g', r'G'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'h', r'H'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'i', r'I'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'j', r'J'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'k', r'K'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'l', r'L'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'm', r'M'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'n', r'N'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'o', r'O'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'p', r'P'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'q', r'Q'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'r', r'R'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r's', r'S'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r't', r'T'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'u', r'U'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'v', r'V'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'w', r'W'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'x', r'X'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'y', r'Y'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'z', r'Z'], 'Z');
  });

  group('es', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'}', r'°'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'|', r'¡'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'@', r'⅛'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'·', r'#', r'£'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'~', r'$'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'½', r'⅜'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'¬', r'⅝'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'{', r'⅞'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'[', r'™'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r']', r'±'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'æ', r'Æ'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'”', r'’'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'¢', r'©'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'ð', r'Ð'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r'¢'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'đ', r'ª'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'ŋ', r'Ŋ'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'ħ', r'Ħ'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'→', r'ı'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'̉', r'̛'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'ĸ', r'&'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'ł', r'Ł'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r'º'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'n', r'N'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'þ', r'Þ'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'@', r'Ω'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'¶', r'®'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r'§'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'ŧ', r'Ŧ'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'↓', r'↑'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'“', r'‘'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'ł', r'Ł'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'»', r'>'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'←', r'¥'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'«', r'<'], 'Z');
  });

  group('fr', () {
    verifyEntry(mapping, 'Digit0', <String>[r'à', r'0', r'@', r'°'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'&', r'1', r'¹', r'¡'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'é', r'2', r'~', r'⅛'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'"', r'3', r'#', r'£'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r"'", r'4', r'{', r'$'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'(', r'5', r'[', r'⅜'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'-', r'6', r'|', r'⅝'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'è', r'7', r'`', r'⅞'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'_', r'8', r'\', r'™'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'ç', r'9', r'^', r'±'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'q', r'Q', r'@', r'Ω'], 'Q');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'”', r'’'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'¢', r'©'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'ð', r'Ð'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r'¢'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'đ', r'ª'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'ŋ', r'Ŋ'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'ħ', r'Ħ'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'→', r'ı'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'̉', r'̛'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'ĸ', r'&'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'ł', r'Ł'], 'L');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'n', r'N'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'þ', r'Þ'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'a', r'A', r'æ', r'Æ'], 'A');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'¶', r'®'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r'§'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'ŧ', r'Ŧ'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'↓', r'↑'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'“', r'‘'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'z', r'Z', r'«', r'<'], 'Z');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'»', r'>'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'←', r'¥'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'w', r'W', r'ł', r'Ł'], 'W');
    verifyEntry(mapping, 'Semicolon', <String>[r'm', r'M', r'µ', r'º'], 'M');
  });

  group('ru', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'0', r')'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'1', r'!'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'2', r'"'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'№', r'3', r'№'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r';', r'4', r';'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'5', r'%'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r':', r'6', r':'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'?', r'7', r'?'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'₽', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'9', r'('], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'ф', r'Ф', r'ф', r'Ф'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'и', r'И', r'и', r'И'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'с', r'С', r'с', r'С'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'в', r'В', r'в', r'В'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'у', r'У', r'у', r'У'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'а', r'А', r'а', r'А'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'п', r'П', r'п', r'П'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'р', r'Р', r'р', r'Р'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'ш', r'Ш', r'ш', r'Ш'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'о', r'О', r'о', r'О'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'л', r'Л', r'л', r'Л'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'д', r'Д', r'д', r'Д'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'ь', r'Ь', r'ь', r'Ь'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'т', r'Т', r'т', r'Т'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'щ', r'Щ', r'щ', r'Щ'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'з', r'З', r'з', r'З'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'й', r'Й', r'й', r'Й'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'к', r'К', r'к', r'К'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r'ы', r'Ы', r'ы', r'Ы'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r'е', r'Е', r'е', r'Е'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'г', r'Г', r'г', r'Г'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'м', r'М', r'м', r'М'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'ц', r'Ц', r'ц', r'Ц'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'ч', r'Ч', r'ч', r'Ч'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'н', r'Н', r'н', r'Н'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'я', r'Я', r'я', r'Я'], 'Z');
  });
}

void testDarwin(LocaleKeymap mapping) {
  group('de', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'≠', r'¯'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'¡', r'¬'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'“', r'”'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'§', r'¶', r'#'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¢', r'£'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'[', r'ﬁ'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r']', r'Dead'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'|', r'\'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'{', r'˜'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r'}', r'·'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'å', r'Å'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'∫', r'‹'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'ç', r'Ç'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'∂', r'™'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r'‰'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r'Ï'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'©', r'Ì'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'ª', r'Ó'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'⁄', r'Û'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'º', r'ı'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'∆', r'ˆ'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'@', r'ﬂ'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r'˘'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'Dead', r'›'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'π', r'∏'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'«', r'»'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'¸'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'‚', r'Í'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'†', r'˝'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'Dead', r'Á'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'√', r'◊'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'∑', r'„'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'≈', r'Ù'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'z', r'Z', r'Ω', r'ˇ'], 'Z');
    verifyEntry(mapping, 'KeyZ', <String>[r'y', r'Y', r'¥', r'‡'], 'Y');
  });

  group('dvorak', () {
    verifyEntry(mapping, 'Comma', <String>[r'w', r'W', r'∑', r'„'], 'W');
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'º', r'‚'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'¡', r'⁄'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'™', r'€'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r'‹'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¢', r'›'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'∞', r'ﬁ'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'§', r'ﬂ'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'¶', r'‡'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'•', r'°'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'ª', r'·'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'å', r'Å'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'x', r'X', r'≈', r'˛'], 'X');
    verifyEntry(mapping, 'KeyC', <String>[r'j', r'J', r'∆', r'Ô'], 'J');
    verifyEntry(mapping, 'KeyD', <String>[r'e', r'E', r'Dead', r'´'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'u', r'U', r'Dead', r'¨'], 'U');
    verifyEntry(mapping, 'KeyG', <String>[r'i', r'I', r'Dead', r'ˆ'], 'I');
    verifyEntry(mapping, 'KeyH', <String>[r'd', r'D', r'∂', r'Î'], 'D');
    verifyEntry(mapping, 'KeyI', <String>[r'c', r'C', r'ç', r'Ç'], 'C');
    verifyEntry(mapping, 'KeyJ', <String>[r'h', r'H', r'˙', r'Ó'], 'H');
    verifyEntry(mapping, 'KeyK', <String>[r't', r'T', r'†', r'ˇ'], 'T');
    verifyEntry(mapping, 'KeyL', <String>[r'n', r'N', r'Dead', r'˜'], 'N');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r'Â'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'b', r'B', r'∫', r'ı'], 'B');
    verifyEntry(mapping, 'KeyO', <String>[r'r', r'R', r'®', r'‰'], 'R');
    verifyEntry(mapping, 'KeyP', <String>[r'l', r'L', r'¬', r'Ò'], 'L');
    verifyEntry(mapping, 'KeyR', <String>[r'p', r'P', r'π', r'∏'], 'P');
    verifyEntry(mapping, 'KeyS', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyT', <String>[r'y', r'Y', r'¥', r'Á'], 'Y');
    verifyEntry(mapping, 'KeyU', <String>[r'g', r'G', r'©', r'˝'], 'G');
    verifyEntry(mapping, 'KeyV', <String>[r'k', r'K', r'˚', r''], 'K');
    verifyEntry(mapping, 'KeyX', <String>[r'q', r'Q', r'œ', r'Œ'], 'Q');
    verifyEntry(mapping, 'KeyY', <String>[r'f', r'F', r'ƒ', r'Ï'], 'F');
    verifyEntry(mapping, 'Period', <String>[r'v', r'V', r'√', r'◊'], 'V');
    verifyEntry(mapping, 'Semicolon', <String>[r's', r'S', r'ß', r'Í'], 'S');
    verifyEntry(mapping, 'Slash', <String>[r'z', r'Z', r'Ω', r'¸'], 'Z');
  });

  group('en', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'º', r'‚'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'¡', r'⁄'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'™', r'€'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r'‹'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¢', r'›'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'∞', r'ﬁ'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'§', r'ﬂ'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'¶', r'‡'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'•', r'°'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'ª', r'·'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'å', r'Å'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'∫', r'ı'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'ç', r'Ç'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'∂', r'Î'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'Dead', r'´'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r'Ï'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'©', r'˝'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'˙', r'Ó'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'Dead', r'ˆ'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'∆', r'Ô'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'˚', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'¬', r'Ò'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r'Â'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'Dead', r'˜'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'π', r'∏'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'œ', r'Œ'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'‰'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r'Í'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'†', r'ˇ'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'Dead', r'¨'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'√', r'◊'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'∑', r'„'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'≈', r'˛'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'¥', r'Á'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'Ω', r'¸'], 'Z');
  });

  group('en-ext', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'º', r'‚'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'¡', r'⁄'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'™', r'€'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r'‹'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¢', r'›'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'§', r'†'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'Dead', r'̂'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'¶', r'‡'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'•', r'°'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'ª', r'·'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'Dead', r'̄'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'Dead', r'̆'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'Dead', r'̧'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'ð', r'Ð'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'Dead', r'́'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'©', r'Dead'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'Dead', r'̱'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'Dead', r'̛'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'Dead', r'̋'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'Dead', r'̊'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'Dead', r'̵'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'Dead', r'̨'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'Dead', r'̃'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'Dead', r'̦'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'œ', r'Œ'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'‰'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'þ', r'Þ'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'Dead', r'̈'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'Dead', r'̌'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'Dead', r'̇'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'Dead', r'̣'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'¥', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'Dead', r'̉'], 'Z');
  });

  group('en-intl', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'º', r'‚'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'¡', r'⁄'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'™', r'€'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r'‹'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¢', r'›'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'∞', r'ﬁ'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'Dead', r'§', r'ﬂ'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'¶', r'‡'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'•', r'°'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'ª', r'·'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'å', r'Å'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'∫', r'ı'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'ç', r'Ç'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'∂', r'Î'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'Dead', r'´'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r'Ï'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'©', r'˝'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'˙', r'Ó'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'Dead', r'ˆ'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'∆', r'Ô'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'˚', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'¬', r'Ò'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r'Â'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'Dead', r'˜'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'π', r'∏'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'œ', r'Œ'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'‰'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r'Í'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'†', r'ˇ'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'Dead', r'¨'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'√', r'◊'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'∑', r'„'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'≈', r'˛'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'¥', r'Á'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'Ω', r'¸'], 'Z');
  });

  group('en-uk', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'º', r'‚'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'¡', r'⁄'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'€', r'™'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'£', r'#', r'‹'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¢', r'›'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'∞', r'ﬁ'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'§', r'ﬂ'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'¶', r'‡'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'•', r'°'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'ª', r'·'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'å', r'Å'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'∫', r'ı'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'ç', r'Ç'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'∂', r'Î'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'Dead', r'‰'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r'Ï'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'©', r'Ì'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'˙', r'Ó'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'Dead', r'È'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'∆', r'Ô'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'˚', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'¬', r'Ò'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r'˜'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'Dead', r'ˆ'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'π', r'∏'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'œ', r'Œ'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'Â'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r'Í'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'†', r'Ê'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'Dead', r'Ë'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'√', r'◊'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'∑', r'„'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'≈', r'Ù'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'¥', r'Á'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'Ω', r'Û'], 'Z');
  });

  group('es', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'≠', r'≈'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'|', r'ı'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'@', r'˝'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'·', r'#', r'•'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¢', r'£'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'∞', r'‰'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'¬', r' '], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'÷', r'⁄'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'“', r'‘'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r'”', r'’'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'å', r'Å'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'ß', r''], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'©', r' '], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'∂', r'∆'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r'€'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r'ﬁ'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'', r'ﬂ'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'™', r' '], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r' ', r' '], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'¶', r'¯'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'§', r'ˇ'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r' ', r'˘'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r'˚'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r' ', r'˙'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'π', r'∏'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'œ', r'Œ'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r' '], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'∫', r' '], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'†', r'‡'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r' ', r' '], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'√', r'◊'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'æ', r'Æ'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'∑', r'›'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'¥', r' '], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'Ω', r'‹'], 'Z');
  });

  group('fr', () {
    verifyEntry(mapping, 'Digit0', <String>[r'à', r'0', r'ø', r'Ø'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'&', r'1', r'', r'Dead'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'é', r'2', r'ë', r'„'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'"', r'3', r'“', r'”'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r"'", r'4', r'‘', r'’'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'(', r'5', r'{', r'['], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'§', r'6', r'¶', r'å'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'è', r'7', r'«', r'»'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'!', r'8', r'¡', r'Û'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'ç', r'9', r'Ç', r'Á'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'q', r'Q', r'‡', r'Ω'], 'Q');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'ß', r'∫'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'©', r'¢'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'∂', r'∆'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'ê', r'Ê'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r'·'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'ﬁ', r'ﬂ'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'Ì', r'Î'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'î', r'ï'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'Ï', r'Í'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'È', r'Ë'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'¬', r'|'], 'L');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'Dead', r'ı'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'œ', r'Œ'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'π', r'∏'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'a', r'A', r'æ', r'Æ'], 'A');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'‚'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'Ò', r'∑'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'†', r'™'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'º', r'ª'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'◊', r'√'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'z', r'Z', r'Â', r'Å'], 'Z');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'≈', r'⁄'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'Ú', r'Ÿ'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'w', r'W', r'‹', r'›'], 'W');
    verifyEntry(mapping, 'Semicolon', <String>[r'm', r'M', r'µ', r'Ó'], 'M');
  });

  group('it', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'≠', r'≈'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'«', r'»'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'“', r'”'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'£', r'‘', r'’'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¥', r'¢'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'~', r'‰'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'‹', r'›'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'÷', r'⁄'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'Dead', r''], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r'Dead', r' '], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'å', r'Å'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'∫', r'Í'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'©', r'Á'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'∂', r'˘'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'€', r'È'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r'˙'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'∞', r'˚'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'∆', r'¸'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'œ', r'Œ'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'ª', r'˝'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'º', r'˛'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'¬', r'ˇ'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r'Ú'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'Dead', r'Ó'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'π', r'∏'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'„', r'‚'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'Ì'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r'¯'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'™', r'Ò'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'Dead', r'Ù'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'√', r'É'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'Ω', r'À'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'†', r'‡'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'æ', r'Æ'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'∑', r' '], 'Z');
  });

  group('jp', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'º', r'‚'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'¡', r'⁄'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'™', r'€'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r'‹'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¢', r'›'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'∞', r'ﬁ'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'§', r'ﬂ'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'¶', r'‡'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'•', r'°'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'ª', r'·'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'å', r'Å'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'∫', r'ı'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'ç', r'Ç'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'∂', r'Î'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'Dead', r'´'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r'Ï'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'©', r'˝'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'˙', r'Ó'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'Dead', r'ˆ'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'∆', r'Ô'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'˚', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'¬', r'Ò'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r'Â'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'Dead', r'˜'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'π', r'∏'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'œ', r'Œ'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'‰'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r'Í'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'†', r'ˇ'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'Dead', r'¨'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'√', r'◊'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'∑', r'„'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'≈', r'˛'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'¥', r'Á'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'Ω', r'¸'], 'Z');
  });

  group('jp-roman', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'º', r'‚'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'¡', r'⁄'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'™', r'€'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r'‹'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¢', r'›'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'§', r'†'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'Dead', r'̂'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'¶', r'‡'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'•', r'°'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'ª', r'·'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'Dead', r'̄'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'Dead', r'̆'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'Dead', r'̧'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'ð', r'Ð'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'Dead', r'́'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r''], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'©', r'Dead'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'Dead', r'̱'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'Dead', r'̛'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'Dead', r'̋'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'Dead', r'̊'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'Dead', r'̵'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'Dead', r'̨'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'Dead', r'̃'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'Dead', r'̦'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'œ', r'Œ'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'‰'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r''], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'þ', r'Þ'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'Dead', r'̈'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'Dead', r'̌'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'Dead', r'̇'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'Dead', r'̣'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'¥', r''], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'Dead', r'̉'], 'Z');
  });

  group('ko', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'0', r')'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'1', r'!'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'2', r'@'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'3', r'#'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'4', r'$'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'5', r'%'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'6', r'^'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'7', r'&'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'8', r'*'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'9', r'('], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'ㅁ', r'ㅁ', r'a', r'A'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'ㅠ', r'ㅠ', r'b', r'B'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'ㅊ', r'ㅊ', r'c', r'C'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'ㅇ', r'ㅇ', r'd', r'D'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'ㄷ', r'ㄸ', r'e', r'E'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'ㄹ', r'ㄹ', r'f', r'F'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'ㅎ', r'ㅎ', r'g', r'G'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'ㅗ', r'ㅗ', r'h', r'H'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'ㅑ', r'ㅑ', r'i', r'I'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'ㅓ', r'ㅓ', r'j', r'J'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'ㅏ', r'ㅏ', r'k', r'K'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'ㅣ', r'ㅣ', r'l', r'L'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'ㅡ', r'ㅡ', r'm', r'M'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'ㅜ', r'ㅜ', r'n', r'N'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'ㅐ', r'ㅒ', r'o', r'O'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'ㅔ', r'ㅖ', r'p', r'P'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'ㅂ', r'ㅃ', r'q', r'Q'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'ㄱ', r'ㄲ', r'r', r'R'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r'ㄴ', r'ㄴ', r's', r'S'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r'ㅅ', r'ㅆ', r't', r'T'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'ㅕ', r'ㅕ', r'u', r'U'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'ㅍ', r'ㅍ', r'v', r'V'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'ㅈ', r'ㅉ', r'w', r'W'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'ㅌ', r'ㅌ', r'x', r'X'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'ㅛ', r'ㅛ', r'y', r'Y'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'ㅋ', r'ㅋ', r'z', r'Z'], 'Z');
  });

  group('pl', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'ľ', r'‚'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'Ń', r'ŕ'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'™', r'Ř'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'€', r'‹'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'ß', r'›'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'į', r'ř'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'^', r'§', r'Ŗ'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'¶', r'ŗ'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'•', r'°'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'Ľ', r'Š'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'ą', r'Ą'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'ļ', r'ű'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'ć', r'Ć'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'∂', r'Ž'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'ę', r'Ę'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ń', r'ž'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'©', r'Ū'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'ķ', r'Ó'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'Dead', r'ť'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'∆', r'Ô'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'Ż', r'ū'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'ł', r'Ł'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'Ķ', r'ų'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'ń', r'Ń'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ó', r'Ó'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'Ļ', r'ł'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'Ō', r'ő'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'£'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ś', r'Ś'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'†', r'ś'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'Dead', r'Ť'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'√', r'◊'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'∑', r'„'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'ź', r'Ź'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'ī', r'Á'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'ż', r'Ż'], 'Z');
  });

  group('pt', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'º', r'‚'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'¡', r'⁄'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'™', r'€'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r'‹'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'$', r'¢', r'›'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'∞', r'ﬁ'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'Dead', r'§', r'ﬂ'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'¶', r'‡'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'•', r'°'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'ª', r'·'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'å', r'Å'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'∫', r'ı'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'ç', r'Ç'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'∂', r'Î'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'Dead', r'´'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r'Ï'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'©', r'˝'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'˙', r'Ó'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'Dead', r'ˆ'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'∆', r'Ô'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'˚', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'¬', r'Ò'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r'Â'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'Dead', r'˜'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'π', r'∏'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'œ', r'Œ'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'‰'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r'Í'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'†', r'ˇ'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'Dead', r'¨'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'√', r'◊'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'∑', r'„'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'≈', r'˛'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'¥', r'Á'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'Ω', r'¸'], 'Z');
  });

  group('ru', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r')', r'}', r'`'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'!', r'|'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'@', r'"'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'№', r'#', r'£'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'%', r'$', r'€'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r':', r'%', r'∞'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r',', r'^', r'¬'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'.', r'&', r'¶'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r';', r'*', r'√'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'(', r'{', r"'"], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'ф', r'Ф', r'ƒ', r'ƒ'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'и', r'И', r'и', r'И'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'с', r'С', r'≠', r'≠'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'в', r'В', r'ћ', r'Ћ'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'у', r'У', r'ќ', r'Ќ'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'а', r'А', r'÷', r'÷'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'п', r'П', r'©', r'©'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'р', r'Р', r'₽', r'₽'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'ш', r'Ш', r'ѕ', r'Ѕ'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'о', r'О', r'°', r'•'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'л', r'Л', r'љ', r'Љ'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'д', r'Д', r'∆', r'∆'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'ь', r'Ь', r'~', r'~'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'т', r'Т', r'™', r'™'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'щ', r'Щ', r'ў', r'Ў'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'з', r'З', r'‘', r'’'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'й', r'Й', r'ј', r'Ј'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'к', r'К', r'®', r'®'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r'ы', r'Ы', r'ы', r'Ы'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r'е', r'Е', r'†', r'†'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'г', r'Г', r'ѓ', r'Ѓ'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'м', r'М', r'µ', r'µ'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'ц', r'Ц', r'џ', r'Џ'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'ч', r'Ч', r'≈', r'≈'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'н', r'Н', r'њ', r'Њ'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'я', r'Я', r'ђ', r'Ђ'], 'Z');
  });

  group('sv', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'=', r'≈', r'≠'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'!', r'©', r'¡'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'"', r'@', r'”'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r'¥'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'€', r'$', r'¢'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'∞', r'‰'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'&', r'§', r'¶'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'/', r'|', r'\'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'(', r'[', r'{'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r')', r']', r'}'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'', r'◊'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'›', r'»'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'ç', r'Ç'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'∂', r'∆'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'é', r'É'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r'∫'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'¸', r'¯'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'˛', r'˘'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'ı', r'ˆ'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'√', r'¬'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'ª', r'º'], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'ﬁ', r'ﬂ'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'’', r'”'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'‘', r'“'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'œ', r'Œ'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'π', r'∏'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'•', r'°'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'√'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r'∑'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'†', r'‡'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'ü', r'Ü'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'‹', r'«'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'Ω', r'˝'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'≈', r'ˇ'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'µ', r'˜'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'÷', r'⁄'], 'Z');
  });

  group('zh-hans', () {
    verifyEntry(mapping, 'Digit0', <String>[r'0', r'）', r'º', r'‚'], '0');
    verifyEntry(mapping, 'Digit1', <String>[r'1', r'！', r'¡', r'⁄'], '1');
    verifyEntry(mapping, 'Digit2', <String>[r'2', r'@', r'™', r'€'], '2');
    verifyEntry(mapping, 'Digit3', <String>[r'3', r'#', r'£', r'‹'], '3');
    verifyEntry(mapping, 'Digit4', <String>[r'4', r'¥', r'¢', r'›'], '4');
    verifyEntry(mapping, 'Digit5', <String>[r'5', r'%', r'∞', r'ﬁ'], '5');
    verifyEntry(mapping, 'Digit6', <String>[r'6', r'', r'§', r'ﬂ'], '6');
    verifyEntry(mapping, 'Digit7', <String>[r'7', r'&', r'¶', r'‡'], '7');
    verifyEntry(mapping, 'Digit8', <String>[r'8', r'*', r'•', r'°'], '8');
    verifyEntry(mapping, 'Digit9', <String>[r'9', r'（', r'ª', r'·'], '9');
    verifyEntry(mapping, 'KeyA', <String>[r'a', r'A', r'å', r'Å'], 'A');
    verifyEntry(mapping, 'KeyB', <String>[r'b', r'B', r'∫', r'ı'], 'B');
    verifyEntry(mapping, 'KeyC', <String>[r'c', r'C', r'ç', r'Ç'], 'C');
    verifyEntry(mapping, 'KeyD', <String>[r'd', r'D', r'∂', r'Î'], 'D');
    verifyEntry(mapping, 'KeyE', <String>[r'e', r'E', r'Dead', r'´'], 'E');
    verifyEntry(mapping, 'KeyF', <String>[r'f', r'F', r'ƒ', r'Ï'], 'F');
    verifyEntry(mapping, 'KeyG', <String>[r'g', r'G', r'©', r'˝'], 'G');
    verifyEntry(mapping, 'KeyH', <String>[r'h', r'H', r'˙', r'Ó'], 'H');
    verifyEntry(mapping, 'KeyI', <String>[r'i', r'I', r'Dead', r'ˆ'], 'I');
    verifyEntry(mapping, 'KeyJ', <String>[r'j', r'J', r'∆', r'Ô'], 'J');
    verifyEntry(mapping, 'KeyK', <String>[r'k', r'K', r'˚', r''], 'K');
    verifyEntry(mapping, 'KeyL', <String>[r'l', r'L', r'¬', r'Ò'], 'L');
    verifyEntry(mapping, 'KeyM', <String>[r'm', r'M', r'µ', r'Â'], 'M');
    verifyEntry(mapping, 'KeyN', <String>[r'n', r'N', r'Dead', r'˜'], 'N');
    verifyEntry(mapping, 'KeyO', <String>[r'o', r'O', r'ø', r'Ø'], 'O');
    verifyEntry(mapping, 'KeyP', <String>[r'p', r'P', r'π', r'∏'], 'P');
    verifyEntry(mapping, 'KeyQ', <String>[r'q', r'Q', r'œ', r'Œ'], 'Q');
    verifyEntry(mapping, 'KeyR', <String>[r'r', r'R', r'®', r'‰'], 'R');
    verifyEntry(mapping, 'KeyS', <String>[r's', r'S', r'ß', r'Í'], 'S');
    verifyEntry(mapping, 'KeyT', <String>[r't', r'T', r'†', r'ˇ'], 'T');
    verifyEntry(mapping, 'KeyU', <String>[r'u', r'U', r'Dead', r'¨'], 'U');
    verifyEntry(mapping, 'KeyV', <String>[r'v', r'V', r'√', r'◊'], 'V');
    verifyEntry(mapping, 'KeyW', <String>[r'w', r'W', r'∑', r'„'], 'W');
    verifyEntry(mapping, 'KeyX', <String>[r'x', r'X', r'≈', r'˛'], 'X');
    verifyEntry(mapping, 'KeyY', <String>[r'y', r'Y', r'¥', r'Á'], 'Y');
    verifyEntry(mapping, 'KeyZ', <String>[r'z', r'Z', r'Ω', r'¸'], 'Z');
  });
}
