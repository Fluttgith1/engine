//---------------------------------------------------------------------------------------------
//  Copyright (c) 2022 Google LLC
//  Licensed under the MIT License. See License.txt in the project root for license information.
//--------------------------------------------------------------------------------------------*/

// DO NOT EDIT -- DO NOT EDIT -- DO NOT EDIT
//
// This file is auto generated by flutter/engine:flutter/tools/gen_web_keyboard_layouts based on
// https://github.com/microsoft/vscode/tree/ae34e8d2df286f8c8882d22db417e6dc4cdb01f5/src/vs/workbench/services/keybinding/browser/keyboardLayouts
//
// Edit the following files instead:
//
//  - Script: lib/main.dart
//  - Templates: data/*.tmpl
//
// See flutter/engine:flutter/tools/gen_web_keyboard_layouts/README.md for more information.


/// A special value in the final mapping that indicates the logical key should
/// be derived from KeyboardEvent.keyCode.
const int kUseKeyCode = 1;

/// A map of all goals from the scan codes to their mapped value in US layout.
const Map<String, String> kLayoutGoals = <String, String>{
  'KeyA': 'A',
  'KeyB': 'B',
  'KeyC': 'C',
  'KeyD': 'D',
  'KeyE': 'E',
  'KeyF': 'F',
  'KeyG': 'G',
  'KeyH': 'H',
  'KeyI': 'I',
  'KeyJ': 'J',
  'KeyK': 'K',
  'KeyL': 'L',
  'KeyM': 'M',
  'KeyN': 'N',
  'KeyO': 'O',
  'KeyP': 'P',
  'KeyQ': 'Q',
  'KeyR': 'R',
  'KeyS': 'S',
  'KeyT': 'T',
  'KeyU': 'U',
  'KeyV': 'V',
  'KeyW': 'W',
  'KeyX': 'X',
  'KeyY': 'Y',
  'KeyZ': 'Z',
  'Digit1': '1',
  'Digit2': '2',
  'Digit3': '3',
  'Digit4': '4',
  'Digit5': '5',
  'Digit6': '6',
  'Digit7': '7',
  'Digit8': '8',
  'Digit9': '9',
  'Digit0': '0',
  'Minus': '-',
  'Equal': '=',
  'BracketLeft': '[',
  'BracketRight': ']',
  'Backslash': r'\',
  'Semicolon': ';',
  'Quote': "'",
  'Backquote': '`',
  'Comma': ',',
  'Period': '.',
  'Slash': '/',
};

final int _kLowerA = 'a'.codeUnitAt(0);
final int _kUpperA = 'A'.codeUnitAt(0);
final int _kLowerZ = 'z'.codeUnitAt(0);
final int _kUpperZ = 'Z'.codeUnitAt(0);
final int _k0 = '0'.codeUnitAt(0);
final int _k9 = '9'.codeUnitAt(0);

bool _isAscii(String key) {
  if (key.length != 1) {
    return false;
  }
  // 0x20 is the first printable character in ASCII.
  return key.codeUnitAt(0) >= 0x20 && key.codeUnitAt(0) <= 0x7F;
}

/// Returns whether the `char` is a single character of a letter or a digit.
bool isAlnum(String char) {
  if (char.length != 1) {
    return false;
  }
  final int charCode = char.codeUnitAt(0);
  return (charCode >= _kLowerA && charCode <= _kLowerZ)
      || (charCode >= _kUpperA && charCode <= _kUpperZ)
      || (charCode >= _k0 && charCode <= _k9);
}

/// A set of rules that can derive a large number of logical keys simply from
/// the event's code and key.
///
/// This greatly reduces the entries needed in the final mapping.
int? heuristicDetector(String code, String key) {
  if (isAlnum(key)) {
    return key.toLowerCase().codeUnitAt(0);
  }
  if (!_isAscii(key)) {
    return kLayoutGoals[code]!.codeUnitAt(0);
  }
  return null;
}

/// Data for [LayoutMapping] on Windows.
///
/// Do not use this value, but [LayoutMapping.win] instead.
///
/// The keys are `KeyboardEvent.code` and then `KeyboardEvent.key`. The values
/// are logical keys or [kUseKeyCode]. Entries that can be derived using
/// heuristics have been omitted.
final Map<String, Map<String, int>> kMappingDataWin = <String, Map<String, int>>{
  'Backquote': <String, int>{
    '§': 0x30,
  },
  'Digit0': <String, int>{
    ')': 0x30,
    '=': 0x30,
    '@': 0x30,
    '}': 0x30,
  },
  'Digit1': <String, int>{
    '!': 0x31,
    '&': 0x31,
    "'": 0x31,
    '+': 0x31,
    '>': 0x31,
    '|': 0x31,
    '~': 0x31,
  },
  'Digit2': <String, int>{
    '"': 0x32,
    "'": 0x32,
    '/': 0x32,
    '@': 0x32,
    '~': 0x32,
  },
  'Digit3': <String, int>{
    '"': 0x33,
    '#': 0x33,
    '*': 0x33,
    '+': 0x33,
    '-': 0x33,
    '^': 0x33,
  },
  'Digit4': <String, int>{
    '!': 0x34,
    r'$': 0x34,
    "'": 0x34,
    '+': 0x34,
    ';': 0x34,
    '{': 0x34,
    '~': 0x34,
  },
  'Digit5': <String, int>{
    '%': 0x35,
    '(': 0x35,
    '[': 0x35,
  },
  'Digit6': <String, int>{
    '&': 0x36,
    '-': 0x36,
    '/': 0x36,
    ':': 0x36,
    '^': 0x36,
    '|': 0x36,
  },
  'Digit7': <String, int>{
    '&': 0x37,
    '/': 0x37,
    '=': 0x37,
    '?': 0x37,
    '`': 0x37,
    '{': 0x37,
    '|': 0x37,
  },
  'Digit8': <String, int>{
    '!': 0x38,
    '(': 0x38,
    '*': 0x38,
    '[': 0x38,
    r'\': 0x38,
    '_': 0x38,
  },
  'Digit9': <String, int>{
    '(': 0x39,
    ')': 0x39,
    ']': 0x39,
    '^': 0x39,
    '{': 0x39,
  },
  'KeyA': <String, int>{
    'A': 0x41,
    'Q': 0x51,
    'a': 0x41,
    'q': 0x51,
  },
  'KeyB': <String, int>{
    'B': 0x42,
    'b': 0x42,
    '{': 0x42,
  },
  'KeyC': <String, int>{
    '&': 0x43,
    'C': 0x43,
    'c': 0x43,
  },
  'KeyD': <String, int>{
    'D': 0x44,
    'd': 0x44,
  },
  'KeyE': <String, int>{
    'E': 0x45,
    'e': 0x45,
  },
  'KeyF': <String, int>{
    'F': 0x46,
    '[': 0x46,
    'f': 0x46,
  },
  'KeyG': <String, int>{
    'G': 0x47,
    ']': 0x47,
    'g': 0x47,
  },
  'KeyH': <String, int>{
    'H': 0x48,
    'h': 0x48,
  },
  'KeyI': <String, int>{
    'I': 0x49,
    'i': 0x49,
  },
  'KeyJ': <String, int>{
    'J': 0x4a,
    'j': 0x4a,
  },
  'KeyK': <String, int>{
    'K': 0x4b,
    'k': 0x4b,
  },
  'KeyL': <String, int>{
    'L': 0x4c,
    'l': 0x4c,
  },
  'KeyM': <String, int>{
    '<': 0x4d,
    '?': 0x4d,
    'M': 0x4d,
    'm': 0x4d,
  },
  'KeyN': <String, int>{
    'N': 0x4e,
    'n': 0x4e,
    '}': 0x4e,
  },
  'KeyO': <String, int>{
    'O': 0x4f,
    'o': 0x4f,
  },
  'KeyP': <String, int>{
    'P': 0x50,
    'p': 0x50,
  },
  'KeyQ': <String, int>{
    '/': 0x51,
    '@': 0x51,
    'A': 0x41,
    'Q': 0x51,
    r'\': 0x51,
    'a': 0x41,
    'q': 0x51,
  },
  'KeyR': <String, int>{
    'R': 0x52,
    'r': 0x52,
  },
  'KeyS': <String, int>{
    'S': 0x53,
    's': 0x53,
  },
  'KeyT': <String, int>{
    'T': 0x54,
    't': 0x54,
  },
  'KeyU': <String, int>{
    'U': 0x55,
    'u': 0x55,
  },
  'KeyV': <String, int>{
    '@': 0x56,
    'V': 0x56,
    'v': 0x56,
  },
  'KeyW': <String, int>{
    '"': 0x57,
    '?': 0x57,
    'W': 0x57,
    'Z': 0x5a,
    'w': 0x57,
    'z': 0x5a,
    '|': 0x57,
  },
  'KeyX': <String, int>{
    '#': 0x58,
    ')': 0x58,
    'X': 0x58,
    'x': 0x58,
  },
  'KeyY': <String, int>{
    'Y': 0x59,
    'Z': 0x5a,
    'y': 0x59,
    'z': 0x5a,
  },
  'KeyZ': <String, int>{
    '(': 0x5a,
    '>': 0x59,
    'W': 0x57,
    'Y': 0x59,
    'Z': 0x5a,
    'w': 0x57,
    'y': 0x59,
    'z': 0x5a,
  },
  'Semicolon': <String, int>{
    'M': 0x4d,
    'm': 0x4d,
  },
};

/// Data for [LayoutMapping] on Linux.
///
/// Do not use this value, but [LayoutMapping.linux] instead.
///
/// The keys are `KeyboardEvent.code` and then `KeyboardEvent.key`. The values
/// are logical keys or [kUseKeyCode]. Entries that can be derived using
/// heuristics have been omitted.
final Map<String, Map<String, int>> kMappingDataLinux = <String, Map<String, int>>{
  'Digit0': <String, int>{
    ')': 0x30,
    '=': 0x30,
    '@': 0x30,
    '}': 0x30,
  },
  'Digit1': <String, int>{
    '!': 0x31,
    '&': 0x31,
    '|': 0x31,
  },
  'Digit2': <String, int>{
    '"': 0x32,
    '@': 0x32,
    '~': 0x32,
  },
  'Digit3': <String, int>{
    '"': 0x33,
    '#': 0x33,
  },
  'Digit4': <String, int>{
    r'$': 0x34,
    "'": 0x34,
    ';': 0x34,
    '{': 0x34,
    '~': 0x34,
  },
  'Digit5': <String, int>{
    '%': 0x35,
    '(': 0x35,
    '[': 0x35,
  },
  'Digit6': <String, int>{
    '&': 0x36,
    '-': 0x36,
    ':': 0x36,
    '^': 0x36,
    '|': 0x36,
  },
  'Digit7': <String, int>{
    '&': 0x37,
    '/': 0x37,
    '?': 0x37,
    '`': 0x37,
    '{': 0x37,
  },
  'Digit8': <String, int>{
    '(': 0x38,
    '*': 0x38,
    '[': 0x38,
    r'\': 0x38,
    '_': 0x38,
  },
  'Digit9': <String, int>{
    '(': 0x39,
    ')': 0x39,
    ']': 0x39,
    '^': 0x39,
  },
  'KeyA': <String, int>{
    '@': 0x51,
    'A': 0x41,
    'Q': 0x51,
    'a': 0x41,
    'q': 0x51,
    'Ω': 0x51,
  },
  'KeyB': <String, int>{
    'B': 0x42,
    'b': 0x42,
  },
  'KeyC': <String, int>{
    'C': 0x43,
    'c': 0x43,
  },
  'KeyD': <String, int>{
    'D': 0x44,
    'd': 0x44,
  },
  'KeyE': <String, int>{
    'E': 0x45,
    'e': 0x45,
  },
  'KeyF': <String, int>{
    'F': 0x46,
    'f': 0x46,
  },
  'KeyG': <String, int>{
    'G': 0x47,
    'g': 0x47,
  },
  'KeyH': <String, int>{
    'H': 0x48,
    'h': 0x48,
  },
  'KeyI': <String, int>{
    'I': 0x49,
    'i': 0x49,
  },
  'KeyJ': <String, int>{
    'J': 0x4a,
    'j': 0x4a,
  },
  'KeyK': <String, int>{
    '&': 0x4b,
    'K': 0x4b,
    'k': 0x4b,
  },
  'KeyL': <String, int>{
    'L': 0x4c,
    'l': 0x4c,
  },
  'KeyM': <String, int>{
    'M': 0x4d,
    'm': 0x4d,
  },
  'KeyN': <String, int>{
    'N': 0x4e,
    'n': 0x4e,
  },
  'KeyO': <String, int>{
    'O': 0x4f,
    'o': 0x4f,
  },
  'KeyP': <String, int>{
    'P': 0x50,
    'p': 0x50,
  },
  'KeyQ': <String, int>{
    '@': 0x51,
    'A': 0x41,
    'Q': 0x51,
    'a': 0x41,
    'q': 0x51,
    'Æ': 0x41,
    'æ': 0x41,
  },
  'KeyR': <String, int>{
    'R': 0x52,
    'r': 0x52,
  },
  'KeyS': <String, int>{
    'S': 0x53,
    's': 0x53,
  },
  'KeyT': <String, int>{
    'T': 0x54,
    't': 0x54,
  },
  'KeyU': <String, int>{
    'U': 0x55,
    'u': 0x55,
  },
  'KeyV': <String, int>{
    'V': 0x56,
    'v': 0x56,
  },
  'KeyW': <String, int>{
    '<': 0x5a,
    'W': 0x57,
    'Z': 0x5a,
    'w': 0x57,
    'z': 0x5a,
    '«': 0x5a,
  },
  'KeyX': <String, int>{
    '>': 0x58,
    'X': 0x58,
    'x': 0x58,
  },
  'KeyY': <String, int>{
    'Y': 0x59,
    'Z': 0x5a,
    'y': 0x59,
    'z': 0x5a,
    '¥': 0x1,
    '←': 0x1,
  },
  'KeyZ': <String, int>{
    '<': 0x5a,
    'W': 0x57,
    'Y': 0x59,
    'Z': 0x5a,
    'w': 0x57,
    'y': 0x59,
    'z': 0x5a,
    '»': 0x59,
    'Ł': 0x57,
    'ł': 0x57,
    '›': 0x59,
  },
  'Semicolon': <String, int>{
    'M': 0x4d,
    'm': 0x4d,
    'µ': 0x4d,
    'º': 0x4d,
  },
};

/// Data for [LayoutMapping] on Darwin.
///
/// Do not use this value, but [LayoutMapping.darwin] instead.
///
/// The keys are `KeyboardEvent.code` and then `KeyboardEvent.key`. The values
/// are logical keys or [kUseKeyCode]. Entries that can be derived using
/// heuristics have been omitted.
final Map<String, Map<String, int>> kMappingDataDarwin = <String, Map<String, int>>{
  'Comma': <String, int>{
    'W': 0x57,
    'w': 0x57,
    '„': 0x57,
    '∑': 0x57,
  },
  'Digit0': <String, int>{
    ')': 0x30,
    '=': 0x30,
    '`': 0x30,
    '}': 0x30,
  },
  'Digit1': <String, int>{
    '!': 0x31,
    '&': 0x31,
    '|': 0x31,
  },
  'Digit2': <String, int>{
    '"': 0x32,
    '@': 0x32,
  },
  'Digit3': <String, int>{
    '"': 0x33,
    '#': 0x33,
  },
  'Digit4': <String, int>{
    r'$': 0x34,
    '%': 0x34,
    "'": 0x34,
  },
  'Digit5': <String, int>{
    '%': 0x35,
    '(': 0x35,
    ':': 0x35,
    '[': 0x35,
    '{': 0x35,
    '~': 0x35,
  },
  'Digit6': <String, int>{
    ' ': 0x36,
    '&': 0x36,
    ',': 0x36,
    ']': 0x36,
    '^': 0x36,
  },
  'Digit7': <String, int>{
    '&': 0x37,
    '.': 0x37,
    '/': 0x37,
    r'\': 0x37,
    '|': 0x37,
  },
  'Digit8': <String, int>{
    '!': 0x38,
    '(': 0x38,
    '*': 0x38,
    ';': 0x38,
    '[': 0x38,
    '{': 0x38,
  },
  'Digit9': <String, int>{
    ' ': 0x39,
    "'": 0x39,
    '(': 0x39,
    ')': 0x39,
    ']': 0x39,
    '{': 0x39,
    '}': 0x39,
  },
  'KeyA': <String, int>{
    'A': 0x41,
    'Q': 0x51,
    'a': 0x41,
    'q': 0x51,
    'Ω': 0x51,
    '‡': 0x51,
  },
  'KeyB': <String, int>{
    'B': 0x42,
    'X': 0x58,
    'b': 0x42,
    'x': 0x58,
    '˛': 0x58,
    '≈': 0x58,
  },
  'KeyC': <String, int>{
    ' ': 0x43,
    'C': 0x43,
    'J': 0x4a,
    'c': 0x43,
    'j': 0x4a,
    'Ô': 0x4a,
    '∆': 0x4a,
  },
  'KeyD': <String, int>{
    'D': 0x44,
    'Dead': 0x45,
    'E': 0x45,
    'd': 0x44,
    'e': 0x45,
    '´': 0x45,
  },
  'KeyE': <String, int>{
    'E': 0x45,
    'e': 0x45,
  },
  'KeyF': <String, int>{
    'Dead': 0x55,
    'F': 0x46,
    'U': 0x55,
    'f': 0x46,
    'u': 0x55,
    '¨': 0x55,
  },
  'KeyG': <String, int>{
    'Dead': 0x1,
    'G': 0x47,
    'I': 0x49,
    'g': 0x47,
    'i': 0x49,
    'ˆ': 0x49,
  },
  'KeyH': <String, int>{
    ' ': 0x48,
    'D': 0x44,
    'H': 0x48,
    'd': 0x44,
    'h': 0x48,
    'Î': 0x1,
    '∂': 0x44,
  },
  'KeyI': <String, int>{
    ' ': 0x49,
    'C': 0x43,
    'I': 0x49,
    'c': 0x43,
    'i': 0x49,
    'Ç': 0x43,
    'ç': 0x43,
  },
  'KeyJ': <String, int>{
    'H': 0x48,
    'J': 0x4a,
    'h': 0x48,
    'j': 0x4a,
    'Ó': 0x48,
    '˙': 0x48,
  },
  'KeyK': <String, int>{
    'K': 0x4b,
    'T': 0x54,
    'k': 0x4b,
    't': 0x54,
    'ˇ': 0x1,
    '†': 0x54,
  },
  'KeyL': <String, int>{
    ' ': 0x4c,
    '@': 0x4c,
    'Dead': 0x1,
    'L': 0x4c,
    'N': 0x4e,
    'l': 0x4c,
    'n': 0x4e,
    '|': 0x4c,
    '˜': 0x4e,
  },
  'KeyM': <String, int>{
    'M': 0x4d,
    'm': 0x4d,
    '~': 0x4d,
  },
  'KeyN': <String, int>{
    ' ': 0x4e,
    'B': 0x42,
    'N': 0x4e,
    'b': 0x42,
    'n': 0x4e,
    'ı': 0x1,
    '∫': 0x42,
  },
  'KeyO': <String, int>{
    'O': 0x4f,
    'R': 0x52,
    'o': 0x4f,
    'r': 0x52,
    '®': 0x52,
    '‰': 0x52,
  },
  'KeyP': <String, int>{
    'L': 0x4c,
    'P': 0x50,
    'l': 0x4c,
    'p': 0x50,
    '¬': 0x4c,
    'Ò': 0x4c,
  },
  'KeyQ': <String, int>{
    'A': 0x41,
    'Q': 0x51,
    'a': 0x41,
    'q': 0x51,
    'Æ': 0x41,
    'æ': 0x41,
  },
  'KeyR': <String, int>{
    ' ': 0x52,
    'P': 0x50,
    'R': 0x52,
    'p': 0x50,
    'r': 0x52,
    'π': 0x50,
    '∏': 0x50,
  },
  'KeyS': <String, int>{
    ' ': 0x53,
    'O': 0x4f,
    'S': 0x53,
    'o': 0x4f,
    's': 0x53,
    'Ø': 0x4f,
    'ø': 0x4f,
  },
  'KeyT': <String, int>{
    'T': 0x54,
    'Y': 0x59,
    't': 0x54,
    'y': 0x59,
    '¥': 0x59,
    'Á': 0x59,
  },
  'KeyU': <String, int>{
    ' ': 0x55,
    'G': 0x47,
    'U': 0x55,
    'g': 0x47,
    'u': 0x55,
    '©': 0x47,
    '˝': 0x47,
  },
  'KeyV': <String, int>{
    'K': 0x4b,
    'V': 0x56,
    'k': 0x4b,
    'v': 0x56,
    '˚': 0x4b,
    '': 0x4b,
  },
  'KeyW': <String, int>{
    'W': 0x57,
    'Z': 0x5a,
    'w': 0x57,
    'z': 0x5a,
    'Â': 0x5a,
    'Å': 0x5a,
  },
  'KeyX': <String, int>{
    'Q': 0x51,
    'X': 0x58,
    'q': 0x51,
    'x': 0x58,
    'Œ': 0x51,
    'œ': 0x51,
  },
  'KeyY': <String, int>{
    ' ': 0x59,
    'F': 0x46,
    'Y': 0x59,
    'Z': 0x5a,
    'f': 0x46,
    'y': 0x59,
    'z': 0x5a,
    'Ï': 0x46,
    'ƒ': 0x46,
    'ˇ': 0x5a,
    'Ω': 0x5a,
  },
  'KeyZ': <String, int>{
    ' ': 0x5a,
    'W': 0x57,
    'Y': 0x59,
    'Z': 0x5a,
    'w': 0x57,
    'y': 0x59,
    'z': 0x5a,
    '¥': 0x59,
    '‡': 0x59,
    '‹': 0x1,
    '›': 0x57,
  },
  'Period': <String, int>{
    'V': 0x56,
    'v': 0x56,
    '√': 0x56,
    '◊': 0x56,
  },
  'Semicolon': <String, int>{
    'M': 0x4d,
    'S': 0x53,
    'm': 0x4d,
    's': 0x53,
    'µ': 0x4d,
    'Í': 0x53,
    'Ó': 0x4d,
    'ß': 0x53,
  },
  'Slash': <String, int>{
    'Z': 0x5a,
    'z': 0x5a,
    '¸': 0x5a,
    'Ω': 0x5a,
  },
};
