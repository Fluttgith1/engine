//---------------------------------------------------------------------------------------------
//  Copyright (c) 2022 Google LLC
//  Licensed under the MIT License. See License.txt in the project root for license information.
//--------------------------------------------------------------------------------------------*/

// DO NOT EDIT -- DO NOT EDIT -- DO NOT EDIT
//
// This file is auto generated by flutter/engine:flutter/tools/gen_web_keyboard_layouts based on
// https://github.com/microsoft/vscode/tree/ae34e8d2df286f8c8882d22db417e6dc4cdb01f5/src/vs/workbench/services/keybinding/browser/keyboardLayouts
//
// Edit the following files instead:
//
//  - Script: lib/main.dart
//  - Templates: data/*.tmpl
//
// See flutter/engine:flutter/tools/gen_web_keyboard_layouts/README.md for more information.

/// Used in the final mapping indicating the logical key should be derived from
/// KeyboardEvent.keyCode.
///
/// This value is chosen because it's a printable character within EASCII that
/// will never be mapped to (checked in the marshalling algorithm).
const int kUseKeyCode = 0xFF;

/// Used in the final mapping indicating the event key is 'Dead', the dead key.
final String _kUseDead = String.fromCharCode(0xFE);

/// The KeyboardEvent.key for a dead key.
const String _kEventKeyDead = 'Dead';

/// A map of all goals from the scan codes to their mapped value in US layout.
const Map<String, String> kLayoutGoals = <String, String>{
  'KeyA': 'a',
  'KeyB': 'b',
  'KeyC': 'c',
  'KeyD': 'd',
  'KeyE': 'e',
  'KeyF': 'f',
  'KeyG': 'g',
  'KeyH': 'h',
  'KeyI': 'i',
  'KeyJ': 'j',
  'KeyK': 'k',
  'KeyL': 'l',
  'KeyM': 'm',
  'KeyN': 'n',
  'KeyO': 'o',
  'KeyP': 'p',
  'KeyQ': 'q',
  'KeyR': 'r',
  'KeyS': 's',
  'KeyT': 't',
  'KeyU': 'u',
  'KeyV': 'v',
  'KeyW': 'w',
  'KeyX': 'x',
  'KeyY': 'y',
  'KeyZ': 'z',
  'Digit1': '1',
  'Digit2': '2',
  'Digit3': '3',
  'Digit4': '4',
  'Digit5': '5',
  'Digit6': '6',
  'Digit7': '7',
  'Digit8': '8',
  'Digit9': '9',
  'Digit0': '0',
  'Minus': '-',
  'Equal': '=',
  'BracketLeft': '[',
  'BracketRight': ']',
  'Backslash': r'\',
  'Semicolon': ';',
  'Quote': "'",
  'Backquote': '`',
  'Comma': ',',
  'Period': '.',
  'Slash': '/',
};

final int _kLowerA = 'a'.codeUnitAt(0);
final int _kUpperA = 'A'.codeUnitAt(0);
final int _kLowerZ = 'z'.codeUnitAt(0);
final int _kUpperZ = 'Z'.codeUnitAt(0);
final int _k0 = '0'.codeUnitAt(0);
final int _k9 = '9'.codeUnitAt(0);

bool _isAscii(String key) {
  if (key.length != 1) {
    return false;
  }
  // 0x20 is the first printable character in ASCII.
  return key.codeUnitAt(0) >= 0x20 && key.codeUnitAt(0) <= 0x7F;
}

/// Returns whether the `char` is a single character of a letter or a digit.
bool isAlnum(String char) {
  if (char.length != 1) {
    return false;
  }
  final int charCode = char.codeUnitAt(0);
  return (charCode >= _kLowerA && charCode <= _kLowerZ)
      || (charCode >= _kUpperA && charCode <= _kUpperZ)
      || (charCode >= _k0 && charCode <= _k9);
}

/// A set of rules that can derive a large number of logical keys simply from
/// the event's code and key.
///
/// This greatly reduces the entries needed in the final mapping.
int? heuristicMapper(String code, String key) {
  if (isAlnum(key)) {
    return key.toLowerCase().codeUnitAt(0);
  }
  if (!_isAscii(key)) {
    return kLayoutGoals[code]!.codeUnitAt(0);
  }
  return null;
}

// Maps an integer to a printable EASCII character by adding it to this value.
//
// We could've chosen 0x20, the first printable character, for a slightly bigger
// range, but it's prettier this way and sufficient.
final int _kMarshallIntBase = '0'.codeUnitAt(0);

class _StringStream {
  _StringStream(this._data) : _offset = 0;

  final String _data;

  int get offest => _offset;
  int _offset;

  int readIntAsVerbatim() {
    final int result = _data.codeUnitAt(_offset);
    _offset += 1;
    assert(result >= _kMarshallIntBase);
    return result - _kMarshallIntBase;
  }

  int readIntAsChar() {
    final int result = _data.codeUnitAt(_offset);
    _offset += 1;
    return result;
  }

  String readEventKey() {
    final String char = String.fromCharCode(readIntAsChar());
    if (char == _kUseDead) {
      return _kEventKeyDead;
    } else {
      return char;
    }
  }

  String readString() {
    final int length = readIntAsVerbatim();
    if (length == 0) {
      return '';
    }
    final String result = _data.substring(_offset, _offset + length);
    _offset += length;
    return result;
  }
}

Map<String, int> _unmarshallCodeMap(_StringStream stream) {
  final int entryNum = stream.readIntAsVerbatim();
  return Map<String, int>.fromEntries((() sync* {
    for (int entryIndex = 0; entryIndex < entryNum; entryIndex += 1) {
      yield MapEntry<String, int>(stream.readEventKey(), stream.readIntAsChar());
    }
  })());
}

/// Decode a key mapping data out of the string.
Map<String, Map<String, int>> unmarshallMappingData(String compressed) {
  final _StringStream stream = _StringStream(compressed);
  final int eventCodeNum = stream.readIntAsVerbatim();
  return Map<String, Map<String, int>>.fromEntries((() sync* {
    for (int eventCodeIndex = 0; eventCodeIndex < eventCodeNum; eventCodeIndex += 1) {
      yield MapEntry<String, Map<String, int>>(stream.readString(), _unmarshallCodeMap(stream));
    }
  })());
}

/// Data for [LocaleKeymap] on Windows.
///
/// Do not use this value, but [LocaleKeymap.win] instead.
///
/// The keys are `KeyboardEvent.code` and then `KeyboardEvent.key`. The values
/// are logical keys or [kUseKeyCode]. Entries that can be derived using
/// heuristics have been omitted.
Map<String, Map<String, int>> getMappingDataWin() {
  return unmarshallMappingData(
    r'F'
    r'9Backquote1§0'
    r'6Digit04)0=0@0}0'
    r"6Digit17!1&1'1+1>1|1~1"
    '6Digit25"2\'2/2@2~2'
    r'6Digit36"3#3*3+3-3^3'
    r"6Digit47!4$4'4+4;4{4~4"
    r'6Digit53%5(5[5'
    r'6Digit66&6-6/6:6^6|6'
    r'6Digit77&7/7=7?7`7{7|7'
    r'6Digit86!8(8*8[8\8_8'
    r'6Digit95(9)9]9^9{9'
    r'4KeyB1{b'
    r'4KeyC1&c'
    r'4KeyF1[f'
    r'4KeyG1]g'
    r'4KeyM2<m?m'
    r'4KeyN1}n'
    r'4KeyQ3/q@q\q'
    r'4KeyV1@v'
    r'4KeyW3"w?w|w'
    r'4KeyX2#x)x'
    r'4KeyZ2(z>y'
  ); // 308 characters
}

/// Data for [LocaleKeymap] on Linux.
///
/// Do not use this value, but [LocaleKeymap.linux] instead.
///
/// The keys are `KeyboardEvent.code` and then `KeyboardEvent.key`. The values
/// are logical keys or [kUseKeyCode]. Entries that can be derived using
/// heuristics have been omitted.
Map<String, Map<String, int>> getMappingDataLinux() {
  return unmarshallMappingData(
    r'B'
    r'6Digit04)0=0@0}0'
    r'6Digit13!1&1|1'
    r'6Digit23"2@2~2'
    r'6Digit32"3#3'
    r"6Digit45$4'4;4{4~4"
    r'6Digit53%5(5[5'
    r'6Digit65&6-6:6^6|6'
    r'6Digit75&7/7?7`7{7'
    r'6Digit85(8*8[8\8_8'
    r'6Digit94(9)9]9^9'
    r'4KeyA2@qΩq'
    r'4KeyK1&k'
    r'4KeyQ3@qÆaæa'
    r'4KeyW2<z«z'
    r'4KeyX1>x'
    r'4KeyY2¥ÿ←ÿ'
    r'4KeyZ5<z»yŁwłw›y'
    r'9Semicolon2µmºm'
  ); // 248 characters
}

/// Data for [LocaleKeymap] on Darwin.
///
/// Do not use this value, but [LocaleKeymap.darwin] instead.
///
/// The keys are `KeyboardEvent.code` and then `KeyboardEvent.key`. The values
/// are logical keys or [kUseKeyCode]. Entries that can be derived using
/// heuristics have been omitted.
Map<String, Map<String, int>> getMappingDataDarwin() {
  return unmarshallMappingData(
    r'W'
    r'5Comma2„w∑w'
    r'6Digit04)0=0`0}0'
    r'6Digit13!1&1|1'
    r'6Digit22"2@2'
    r'6Digit32"3#3'
    r"6Digit43$4%4'4"
    r'6Digit56%5(5:5[5{5~5'
    r'6Digit65 6&6,6]6^6'
    r'6Digit75&7.7/7\7|7'
    r'6Digit86!8(8*8;8[8{8'
    r"6Digit97 9'9(9)9]9{9}9"
    r'4KeyA2Ωq‡q'
    r'4KeyB2˛x≈x'
    r'4KeyC3 cÔj∆j'
    r'4KeyD2þe´e'
    r'4KeyF2þu¨u'
    r'4KeyG2þÿˆi'
    r'4KeyH3 hÎÿ∂d'
    r'4KeyI3 iÇcçc'
    r'4KeyJ2Óh˙h'
    r'4KeyK2ˇÿ†t'
    r'4KeyL5 l@lþÿ|l˜n'
    r'4KeyM1~m'
    r'4KeyN3 nıÿ∫b'
    r'4KeyO2®r‰r'
    r'4KeyP2¬lÒl'
    r'4KeyQ2Æaæa'
    r'4KeyR3 rπp∏p'
    r'4KeyS3 sØoøo'
    r'4KeyT2¥yÁy'
    r'4KeyU3 u©g˝g'
    r'4KeyV2˚kk'
    r'4KeyW2ÂzÅz'
    r'4KeyX2Œqœq'
    r'4KeyY5 yÏfƒfˇzΩz'
    r'4KeyZ5 z¥y‡y‹ÿ›w'
    r'6Period2√v◊v'
    r'9Semicolon4µmÍsÓmßs'
    r'5Slash2¸zΩz'
  ); // 500 characters
}
