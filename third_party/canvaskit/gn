#!/usr/bin/env vpython3
# Copyright 2013 The Flutter Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import argparse
import os
import subprocess
import sys


SRC_ROOT = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
)

def to_gn_args(args):
  return {
    'build_custom_canvaskit': True,

    'target_os': 'wasm',
    'target_cpu': 'wasm',
    'is_clang': True,
    'use_clang_static_analyzer': False,

    # Image encoders
    'skia_use_libjpeg_turbo_encode': False,
    'skia_use_libpng_encode': True,
    'skia_use_libwebp_encode': False,
    # Image decoders
    'skia_use_libjpeg_turbo_decode': args.decoders,
    'skia_use_libpng_decode': args.decoders,
    'skia_use_libwebp_decode': args.decoders,

    # Font
    'skia_use_freetype': True,
    'skia_use_harfbuzz': True,
    'skia_use_fontconfig': False,
    'skia_enable_fontmgr_custom_directory': False,
    'skia_enable_fontmgr_custom_embedded': True,
    'skia_enable_fontmgr_custom_empty': True,
    'skia_fontmgr_factory': '//third_party/skia:fontmgr_custom_empty_factory',
    'skia_canvaskit_enable_font': True,
    'skia_canvaskit_enable_embedded_font': False,
    'skia_canvaskit_enable_alias_font': True,

    'is_official_build': True,
    'is_component_build': False,
    'skia_enable_flutter_defines': True,
    'skia_use_angle': False,
    'skia_use_dng_sdk': False,
    'skia_use_expat': False,
    'skia_use_vulkan': False,
    'skia_use_webgpu': False,
    'skia_use_libheif': False,
    'skia_use_lua': False,
    'skia_use_wuffs': True,
    'skia_use_zlib': True,
    'skia_gl_standard': 'webgl',
    'skia_enable_gpu': True,
    'skia_enable_sksl_tracing': False,
    'skia_use_libheif': False,
    'skia_enable_skshaper': True,
    'skia_enable_skparagraph': True,

    'skia_canvaskit_force_tracing': False,
    'skia_canvaskit_enable_skp_serialization': True,
    'skia_canvaskit_enable_effects_deserialization': False,
    'skia_canvaskit_enable_skottie': False,
    'skia_canvaskit_include_viewer': False,
    'skia_canvaskit_enable_particles': False,
    'skia_canvaskit_enable_pathops': True,
    'skia_canvaskit_enable_rt_shader': True,
    'skia_canvaskit_enable_matrix_helper': False,
    'skia_canvaskit_enable_canvas_bindings': False,
    'skia_canvaskit_legacy_draw_vertices_blend_mode': False,
    'skia_canvaskit_enable_debugger': False,
    'skia_canvaskit_enable_paragraph': True,
    'skia_canvaskit_enable_webgl': True,
    'skia_canvaskit_enable_webgpu': False,

    'is_debug': args.runtime_mode == 'debug',
    'skia_canvaskit_profile_build': args.runtime_mode == 'profile' or args.runtime_mode == 'debug',

    # ICU flags
    'skia_use_icu': args.icu,
    'skia_use_client_icu': not args.icu,
    'skia_icu_bidi_dir': '//third_party/icu',
    # This is consumed by //third_party/icu rather than Skia.
    'icu_use_data_file': False,
  }


def parse_args(args):
  args = args[1:]
  parser = argparse.ArgumentParser(description='A script to run `gn gen` to build CanvasKit.')

  parser.add_argument('out_dir', help='The output directory')
  parser.add_argument('--runtime-mode', required=True, help='The runtime mode ("debug", "profile", "release")')
  parser.add_argument('--no-icu', dest='icu', default=True, action='store_false', help='Build CanvasKit without ICU')
  parser.add_argument('--no-decoders', dest='decoders', default=True, action='store_false', help='Build CanvasKit without image decoders')
  parser.add_argument('--verbose', default=False, action='store_true', help='Whether to print verbose output')

  return parser.parse_args(args)

def to_command_line(gn_args):
  """Converts the arguments dictionary to a list of command-line arguments.

    Args:
      gn_args: GN arguments dictionary generated by to_gn_args().
    """

  def merge(key, value):
    if isinstance(value, bool):
      return '%s=%s' % (key, 'true' if value else 'false')
    return '%s="%s"' % (key, value)

  return [merge(x, y) for x, y in gn_args.items()]

def main(argv):
  args = parse_args(argv)

  exe = '.exe' if sys.platform.startswith(('cygwin', 'win')) else ''
  command = [
      '%s/flutter/third_party/gn/gn%s' % (SRC_ROOT, exe),
      'gen',
      '--check',
      args.out_dir,
      '--args=%s' % ' '.join(to_command_line(to_gn_args(args))),
  ]

  if args.verbose:
    command.append('-v')

  print('Generating CanvasKit in: %s' % args.out_dir)
  try:
    gn_call_result = subprocess.call(command, cwd=SRC_ROOT)
  except subprocess.CalledProcessError as exc:
    print('Failed to generate gn files: ', exc.returncode, exc.output)
    sys.exit(1)

  return gn_call_result


if __name__ == '__main__':
  sys.exit(main(sys.argv))
