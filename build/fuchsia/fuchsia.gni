# Copyright 2013 The Flutter Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

declare_args() {
  fuchsia_sdk = "//fuchsia/sdk"
}

template("fuchsia_sysroot") {
  assert(defined(invoker.meta), "The meta.json file path must be specified.")

  meta_json = read_file(invoker.meta, "json")

  assert(meta_json.type == "sysroot")

  meta_json_versions = meta_json.versions
  defs = meta_json_versions.x64

  _libs = []
  _lib_dirs = []
  _include_dirs = []

  foreach(link_lib, defs.link_libs) {
    if (link_lib != "arch/x64/sysroot/lib/Scrt1.o") {
      _libs += [ "$fuchsia_sdk/$link_lib" ]
    }
  }

  defs_include_dir = defs.include_dir
  _include_dirs += [ "$fuchsia_sdk/$defs_include_dir" ]

  config_name = "config_$target_name"
  config(config_name) {
    lib_dirs = _lib_dirs
    libs = _libs
    include_dirs = _include_dirs
  }

  group(target_name) {
    public_configs = [ ":$config_name" ]
  }
}

template("fuchsia_cc_source_library") {
  assert(defined(invoker.meta), "The meta.json file path must be specified.")

  meta_json = read_file(invoker.meta, "json")

  assert(meta_json.type == "cc_source_library")

  _include_dirs = []
  _sources = []
  _output_name = meta_json.name

  meta_json_include_dir = meta_json.include_dir
  _include_dirs += [ "$fuchsia_sdk/$meta_json_include_dir" ]

  foreach(header, meta_json.headers) {
    _sources += [ "$fuchsia_sdk/$header" ]
  }

  foreach(source, meta_json.sources) {
    _sources += [ "$fuchsia_sdk/$source" ]
  }

  config_name = "config_$target_name"

  config(config_name) {
    include_dirs = _include_dirs
  }

  source_set(target_name) {
    include_dirs = _include_dirs
    sources = _sources
    public_configs = [ ":$config_name" ]
    output_name = _output_name
  }
}

template("fuchsia_fidl_library") {
  assert(defined(invoker.meta), "The meta.json file path must be specified.")

  meta_json = read_file(invoker.meta, "json")

  assert(meta_json.type == "fidl_library")

  library_name = string_replace(meta_json.name, "fuchsia.", "")
  library_name_json = "$library_name.json"

  config_name = "config_$target_name"
  config(config_name) {
    include_dirs = [ target_gen_dir ]
  }

  action(target_name) {
    script = "$flutter_root/build/fuchsia/fidl_gen_cpp.py"

    inputs = [
      invoker.meta,
    ]

    outputs = [
      "$target_gen_dir/$library_name/$library_name.h",
    ]

    args = [
      "--fidlc-bin",
      rebase_path("$fuchsia_sdk/tools/fidlc"),
      "--fidlgen-bin",
      rebase_path("$fuchsia_sdk/tools/fidlgen"),
      "--sdk-base",
      rebase_path(fuchsia_sdk),
      "--root",
      rebase_path(invoker.meta),
      "--json",
      rebase_path("$target_gen_dir/$library_name_json"),
      "--include-base",
      rebase_path("$target_gen_dir"),
      "--output-base",
      rebase_path("$target_gen_dir/fuchsia/$library_name/cpp/fidl"),
    ]

    public_configs = [ ":$config_name" ]
  }
}

template("fuchsia_sdk") {
  assert(defined(invoker.meta), "The meta.json file path must be specified.")

  meta_json = read_file(invoker.meta, "json")

  foreach(part, meta_json.parts) {
    part_meta_json = {
    }

    part_meta = part.meta
    part_meta_rebased = "$fuchsia_sdk/$part_meta"

    # We need to read the JSON just to figure out what the name of the target ought to be.
    part_meta_json = read_file(part_meta_rebased, "json")
    subtarget_name = part_meta_json.name
    if (part.type == "cc_source_library") {
      fuchsia_cc_source_library(subtarget_name) {
        meta = part_meta_rebased
      }
    } else if (part.type == "sysroot") {
      fuchsia_sysroot(subtarget_name) {
        meta = part_meta_rebased
      }
    } else if (part.type == "fidl_library") {
      fuchsia_fidl_library(subtarget_name) {
        meta = part_meta_rebased
      }
    }
  }

  group(target_name) {
  }
}
