# Copyright 2013 The Flutter Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# The inputs to this template are 'binary_path' and a boolean 'unstripped'.
# If 'unstripped' is specified, we append '.debug' to the symbols name.
template("_copy_debug_symbols") {
  assert(defined(invoker.binary_path), "'binary_path' needs to be defined.")

  bin_path = invoker.binary_path

  _args = []
  if (defined(invoker.unstripped) && invoker.unstripped) {
    _args += [ "--unstripped" ]
  }

  action(target_name) {
    testonly = defined(invoker.testonly) && invoker.testonly

    deps = []
    if (defined(invoker.deps)) {
      deps = invoker.deps
    }

    script = "$flutter_root/tools/fuchsia/copy_debug_symbols.py"

    sources = [
      bin_path,
    ]

    _dest_base =
        "${root_out_dir}/flutter-debug-symbols-${target_os}-${target_cpu}"

    args = _args + [
             "--executable-name",
             target_name,
             "--executable-path",
             rebase_path(bin_path),
             "--destination-base",
             rebase_path(_dest_base),
           ]

    outputs = [
      "${_dest_base}/.${target_name}_success",
    ]
  }
}

# Takes a binary and generates its debug symbols following
# the Fuchsia packaging convention.
template("debug_symbols") {
  assert(defined(invoker.binary), "'binary' needs to be defined.")
  _testonly = defined(invoker.testonly) && invoker.testonly

  _deps = []
  if (defined(invoker.deps)) {
    _deps = invoker.deps
  }

  bin = invoker.binary

  _copy_debug_symbols("_${target_name}_stripped") {
    testonly = _testonly
    binary_path = rebase_path("${root_out_dir}/$bin")
    deps = _deps
  }

  _copy_debug_symbols("_${target_name}_unstripped") {
    testonly = _testonly
    binary_path = "${root_out_dir}/exe.unstripped/$bin"
    unstripped = true
    deps = _deps
  }

  group(target_name) {
    testonly = _testonly
    deps = [
      ":_${target_name}_stripped",
      ":_${target_name}_unstripped",
    ]
  }
}
