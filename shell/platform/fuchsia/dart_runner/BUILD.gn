# Copyright 2013 The Flutter Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(is_fuchsia)

import("//flutter/common/config.gni")
import("//flutter/tools/fuchsia/dart.gni")
import("//flutter/tools/fuchsia/fuchsia_libs.gni")
import("//flutter/tools/fuchsia/gn-sdk/component.gni")
import("//flutter/tools/fuchsia/gn-sdk/package.gni")

template("dart_runner_binary") {
  assert(defined(invoker.aot), "The parameter 'aot' must be defined")
  assert(defined(invoker.product), "The parameter 'product' must be defined")
  _product_suffix = ""
  if (invoker.product) {
    _product_suffix = "_product"
  }

  _exec_name = target_name
  if (defined(invoker.output_name)) {
    _exec_name = invoker.output_name
  }

  executable(target_name) {
    output_name = _exec_name

    sources = [
      "builtin_libraries.cc",
      "builtin_libraries.h",
      "dart_component_controller.cc",
      "dart_component_controller.h",
      "dart_component_controller_v2.cc",
      "dart_component_controller_v2.h",
      "dart_runner.cc",
      "dart_runner.h",
      "logging.h",
      "main.cc",
      "service_isolate.cc",
      "service_isolate.h",
    ]

    defines = []
    if (is_debug) {
      defines += [ "DEBUG" ]  # Needed due to direct dart dependencies.
    }
    if (invoker.aot) {
      defines += [ "AOT_RUNTIME" ]
    }
    if (invoker.product) {
      defines += [ "DART_PRODUCT" ]
    }
    if (flutter_runtime_mode == "profile") {
      defines += [ "FLUTTER_PROFILE" ]
    }

    dart_deps = [
      "//flutter/shell/platform/fuchsia/runtime/dart/utils:utils${_product_suffix}",
      "//third_party/dart/runtime/bin:dart_io_api${_product_suffix}",
    ]
    if (invoker.aot) {
      dart_deps += [
        "embedder:dart_aot${_product_suffix}_snapshot_cc",
        "//third_party/dart/runtime:libdart_precompiled_runtime",
        "//third_party/dart/runtime/platform:libdart_platform_precompiled_runtime",
      ]
    } else {
      dart_deps += [
        "//third_party/dart/runtime:libdart_jit",
        "//third_party/dart/runtime/platform:libdart_platform_jit",
      ]
    }

    deps = [
             "//build/fuchsia/fidl:fuchsia.component.runner",
             "//build/fuchsia/pkg:async",
             "//build/fuchsia/pkg:async-cpp",
             "//build/fuchsia/pkg:async-default",
             "//build/fuchsia/pkg:async-loop",
             "//build/fuchsia/pkg:async-loop-cpp",
             "//build/fuchsia/pkg:async-loop-default",
             "//build/fuchsia/pkg:fidl_cpp",
             "//build/fuchsia/pkg:sys_inspect_cpp",
             "//build/fuchsia/pkg:sys_cpp",
             "//build/fuchsia/pkg:syslog",
             "//build/fuchsia/pkg:trace",
             "//build/fuchsia/pkg:trace-provider-so",
             "//build/fuchsia/pkg:vfs_cpp",
             "//flutter/fml",
             "//flutter/shell/platform/fuchsia/dart-pkg/fuchsia",
             "//flutter/shell/platform/fuchsia/dart-pkg/zircon",
             "//flutter/third_party/tonic",
           ] + dart_deps
  }
}

template("dart_runner_package") {
  assert(defined(invoker.aot), "The parameter 'aot' must be defined")
  assert(defined(invoker.product), "The parameter 'product' must be defined")
  _exec_mode_suffix = "_jit"
  if (invoker.aot) {
    _exec_mode_suffix = "_aot"
  }
  _product_suffix = ""
  if (invoker.product) {
    _product_suffix = "_product"
  }

  _runner_basename = "dart${_exec_mode_suffix}"
  _runner_name = "${_runner_basename}${_product_suffix}"

  _binary_output_name = target_name
  _binary_name = _binary_output_name + "_bin"
  dart_runner_binary(_binary_name) {
    output_name = _binary_output_name
    aot = invoker.aot
    product = invoker.product
  }

  fuchsia_component(target_name + "_component") {
    manifest = rebase_path("meta/${_runner_name}_runner.cmx")

    data_deps = [ ":${_binary_name}" ]
    if (!invoker.aot) {
      data_deps += [ "kernel:kernel_core_snapshot${_product_suffix}" ]
    }
    if (!invoker.product) {
      data_deps += [
        "//flutter/shell/platform/fuchsia/runtime/dart/profiler_symbols:${_runner_basename}_runner",
        observatory_target,
      ]

      if (invoker.aot) {
        data_deps += [
          "vmservice:vmservice_snapshot",
          # TODO(kaushikiska): Figure out how to get the profiler symbols for `libdart_precompiled_runtime`
          # "//third_party/dart/runtime:libdart_precompiled_runtime",
        ]
      }
    }

    resources = common_libs
    resources += [
      {
        path = rebase_path("$root_out_dir/icudtl.dat")
        dest = "data/icudtl.dat"
      },
    ]
    if (!invoker.aot) {
      resources += [
        {
          path = rebase_path(
                  "$target_gen_dir/kernel/vm_data${_product_suffix}.bin")
          dest = "data/vm_snapshot_data.bin"
        },
        {
          path = rebase_path(
                  "$target_gen_dir/kernel/vm_instructions${_product_suffix}.bin")
          dest = "data/vm_snapshot_instructions.bin"
        },
        {
          path = rebase_path(
                  "$target_gen_dir/kernel/isolate_data${_product_suffix}.bin")
          dest = "data/isolate_core_snapshot_data.bin"
        },
        {
          path = rebase_path(
                  "$target_gen_dir/kernel/isolate_instructions${_product_suffix}.bin")
          dest = "data/isolate_core_snapshot_instructions.bin"
        },
      ]
    }
    if (!invoker.product) {
      resources += [
        {
          path = rebase_path(observatory_archive_file)
          dest = "data/observatory.tar"
        },
        {
          path = rebase_path(
                  get_label_info(
                      "//flutter/shell/platform/fuchsia/runtime/dart/profiler_symbols:${_runner_basename}_runner",
                      "target_gen_dir") +
                  "/${_runner_basename}_runner.dartprofilersymbols")
          dest = "data/${_runner_basename}_runner.dartprofilersymbols"
        },
      ]

      if (invoker.aot) {
        resources += [
          {
            path = rebase_path(
                    get_label_info("vmservice:vmservice_snapshot",
                                   "target_gen_dir") + "/vmservice_snapshot.so")
            dest = "data/vmservice_snapshot.so"
          },
        ]
      }
    }
  }

  fuchsia_package(target_name) {
    data_deps = [ ":" + target_name + "_component" ]
  }
}

dart_runner_package("dart_aot_runner") {
  aot = true
  product = false
}

dart_runner_package("dart_aot_product_runner") {
  aot = true
  product = true
}

dart_runner_package("dart_jit_runner") {
  aot = false
  product = false
}

dart_runner_package("dart_jit_product_runner") {
  aot = false
  product = true
}
