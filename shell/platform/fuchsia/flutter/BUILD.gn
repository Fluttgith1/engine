# Copyright 2013 The Flutter Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(is_fuchsia)

import("//flutter/common/config.gni")
import("//flutter/shell/gpu/gpu.gni")
import("//flutter/testing/testing.gni")
import("//flutter/tools/fuchsia/dart.gni")
import("//flutter/tools/fuchsia/fuchsia_libs.gni")
import("//flutter/tools/fuchsia/gn-sdk/component.gni")
import("//flutter/tools/fuchsia/gn-sdk/package.gni")
import("//flutter/vulkan/config.gni")

# Fuchsia uses its own custom Surface implementation.
shell_gpu_configuration("fuchsia_gpu_configuration") {
  enable_software = false
  enable_gl = false

  # TODO(dworsham): Enable once Fuchsia supports Vulkan through the embedder.
  enable_vulkan = false
  enable_metal = false
}

config("runner_base_config") {
  defines = [ "FML_USED_ON_EMBEDDER" ]
}

config("runner_debug_config") {
  defines = [ "DEBUG" ]  # Needed due to direct dart dependencies.
}

config("runner_aot_config") {
  defines = [ "AOT_RUNTIME" ]
}

config("runner_product_config") {
  defines = [ "DART_PRODUCT" ]
}

config("runner_flutter_profile_config") {
  defines = [ "FLUTTER_PROFILE" ]
}

template("flutter_runner_library") {
  assert(defined(invoker.aot), "The parameter 'aot' must be defined")
  assert(defined(invoker.product), "The parameter 'product' must be defined")

  runner_configs = [ ":runner_base_config" ]
  if (is_debug) {
    runner_configs += [ ":runner_debug_config" ]
  }
  if (invoker.aot) {
    runner_configs += [ ":runner_aot_config" ]
  }
  if (invoker.product) {
    runner_configs += [ ":runner_product_config" ]
  }
  if (flutter_runtime_mode == "profile") {
    runner_configs += [ ":runner_flutter_profile_config" ]
  }

  source_set(target_name) {
    sources = [
      "accessibility_bridge.cc",
      "accessibility_bridge.h",
      "component_v1.cc",
      "component_v1.h",
      "component_v2.cc",
      "component_v2.h",
      "engine.cc",
      "engine.h",
      "file_in_namespace_buffer.cc",
      "file_in_namespace_buffer.h",
      "flatland_connection.cc",
      "flatland_connection.h",
      "flatland_external_view_embedder.cc",
      "flatland_external_view_embedder.h",
      "flatland_platform_view.cc",
      "flatland_platform_view.h",
      "flutter_runner_product_configuration.cc",
      "flutter_runner_product_configuration.h",
      "focus_delegate.cc",
      "focus_delegate.h",
      "fuchsia_intl.cc",
      "fuchsia_intl.h",
      "gfx_external_view_embedder.cc",
      "gfx_external_view_embedder.h",
      "gfx_platform_view.cc",
      "gfx_platform_view.h",
      "gfx_session_connection.cc",
      "gfx_session_connection.h",
      "isolate_configurator.cc",
      "isolate_configurator.h",
      "keyboard.cc",
      "keyboard.h",
      "logging.h",
      "platform_view.cc",
      "platform_view.h",
      "pointer_delegate.cc",
      "pointer_delegate.h",
      "runner.cc",
      "runner.h",
      "surface.cc",
      "surface.h",
      "surface_producer.h",
      "task_runner_adapter.cc",
      "task_runner_adapter.h",
      "unique_fdio_ns.h",
      "vsync_waiter.cc",
      "vsync_waiter.h",
      "vulkan_surface.cc",
      "vulkan_surface.h",
      "vulkan_surface_pool.cc",
      "vulkan_surface_pool.h",
      "vulkan_surface_producer.cc",
      "vulkan_surface_producer.h",
    ]

    public_configs = runner_configs

    # The use of these dependencies is temporary and will be moved behind the
    # embedder API.
    flutter_public_deps = [
      "//flutter/common/graphics",
      "//flutter/flow",
      "//flutter/lib/ui",
      "//flutter/runtime",
      "//flutter/shell/common",
      "//flutter/shell/platform/common/client_wrapper:client_wrapper",
    ]
    flutter_deps = [
      ":fuchsia_gpu_configuration",
      "//flutter/assets",
      "//flutter/common",
      "//flutter/fml",
      "//flutter/vulkan",
    ]

    public_deps = [
                    "//build/fuchsia/pkg:inspect",
                    "//build/fuchsia/pkg:scenic_cpp",
                    "//build/fuchsia/pkg:sys_cpp",
                    "//build/fuchsia/pkg:sys_inspect_cpp",
                    "//flutter/shell/platform/fuchsia/runtime/dart/utils",
                  ] + flutter_public_deps
    if (invoker.aot) {
      public_deps += [
        "//third_party/dart/runtime:libdart_precompiled_runtime",
        "//third_party/dart/runtime/platform:libdart_platform_precompiled_runtime",
      ]
    } else {
      public_deps += [
        "//third_party/dart/runtime:libdart_jit",
        "//third_party/dart/runtime/platform:libdart_platform_jit",
      ]
    }

    deps = [
             "//build/fuchsia/fidl:fuchsia.accessibility.semantics",
             "//build/fuchsia/fidl:fuchsia.component.runner",
             "//build/fuchsia/fidl:fuchsia.fonts",
             "//build/fuchsia/fidl:fuchsia.images",
             "//build/fuchsia/fidl:fuchsia.intl",
             "//build/fuchsia/fidl:fuchsia.io",
             "//build/fuchsia/fidl:fuchsia.memorypressure",
             "//build/fuchsia/fidl:fuchsia.sys",
             "//build/fuchsia/fidl:fuchsia.ui.app",
             "//build/fuchsia/fidl:fuchsia.ui.composition",
             "//build/fuchsia/fidl:fuchsia.ui.pointer",
             "//build/fuchsia/fidl:fuchsia.ui.views",
             "//build/fuchsia/fidl:fuchsia.ui.scenic",
             "//build/fuchsia/pkg:async-cpp",
             "//build/fuchsia/pkg:async-default",
             "//build/fuchsia/pkg:async-loop",
             "//build/fuchsia/pkg:async-loop-cpp",
             "//build/fuchsia/pkg:fdio",
             "//build/fuchsia/pkg:fidl_cpp",
             "//build/fuchsia/pkg:syslog",
             "//build/fuchsia/pkg:trace",
             "//build/fuchsia/pkg:trace-engine",
             "//build/fuchsia/pkg:trace-provider-so",
             "//build/fuchsia/pkg:vfs_cpp",
             "//build/fuchsia/pkg:zx",
             "//flutter/shell/platform/fuchsia/dart-pkg/fuchsia",
             "//flutter/shell/platform/fuchsia/dart-pkg/zircon",
           ] + flutter_deps
  }
}

# Things that explicitly being excluded:
# 1. Kernel snapshot framework mode.
# 2. Profiler symbols.

# Builds a flutter_runner
#
# Parameters:
#
#  output_name (required):
#    The name of the resulting binary.
#
#  extra_deps (required):
#    Any additional dependencies.
#
#  product (required):
#    Whether to link against a Product mode Dart VM.
#
#  extra_defines (optional):
#    Any additional preprocessor defines.
template("flutter_runner_binary") {
  assert(defined(invoker.aot), "The parameter 'aot' must be defined")
  assert(defined(invoker.product), "The parameter 'product' must be defined")

  _exec_name = target_name
  if (defined(invoker.output_name)) {
    _exec_name = invoker.output_name
  }

  _lib_name = _exec_name + "_lib"
  flutter_runner_library(_lib_name) {
    aot = invoker.aot
    product = invoker.product
  }

  executable(target_name) {
    output_name = _exec_name

    sources = [ "main.cc" ]

    deps = [
      ":${_lib_name}",
      "//build/fuchsia/pkg:async-loop-cpp",
      "//build/fuchsia/pkg:trace",
      "//build/fuchsia/pkg:trace-provider-so",
    ]
    if (invoker.aot) {
      deps += [
        "//third_party/dart/runtime:libdart_precompiled_runtime",
        "//third_party/dart/runtime/platform:libdart_platform_precompiled_runtime",
      ]
    } else {
      deps += [
        "//third_party/dart/runtime:libdart_jit",
        "//third_party/dart/runtime/platform:libdart_platform_jit",
      ]
    }

    # The flags below are needed so that Dart's CPU profiler can walk the
    # C++ stack.
    cflags = [ "-fno-omit-frame-pointer" ]

    if (invoker.product) {
      # Fuchsia's default stack size was resulting in test failures in a
      # downstream project. Provide some extra room.
      ldflags = [ "-Wl,-z,stack-size=0x100000" ]
    } else {
      # This flag is needed so that the call to dladdr() in Dart's native symbol
      # resolver can report good symbol information for the CPU profiler.
      ldflags = [
        "-Wl,-z,stack-size=0x100000",
        "-rdynamic",
      ]
    }
  }
}

template("flutter_runner_package") {
  assert(defined(invoker.aot), "The parameter 'aot' must be defined")
  assert(defined(invoker.product), "The parameter 'product' must be defined")
  _exec_mode_suffix = "_jit"
  if (invoker.aot) {
    _exec_mode_suffix = "_aot"
  }
  _product_suffix = ""
  if (invoker.product) {
    _product_suffix = "_product"
  }

  _runner_basename = "flutter${_exec_mode_suffix}"
  _runner_name = "${_runner_basename}${_product_suffix}"

  _binary_output_name = target_name
  _binary_name = _binary_output_name + "_bin"
  flutter_runner_binary(_binary_name) {
    output_name = _binary_output_name
    aot = invoker.aot
    product = invoker.product
  }

  fuchsia_component(target_name + "_component") {
    manifest = rebase_path("meta/${_runner_name}_runner.cmx")

    data_deps = [ ":${_binary_name}" ]
    if (!invoker.aot) {
      data_deps += [ "kernel:kernel_core_snapshot${_product_suffix}" ]
    }
    if (!invoker.product) {
      data_deps += [
        "//flutter/shell/platform/fuchsia/runtime/dart/profiler_symbols:${_runner_basename}_runner",
        observatory_target,
      ]

      if (invoker.aot) {
        data_deps += [
          # TODO(kaushikiska): Figure out how to get the profiler symbols for `libdart_precompiled_runtime`
          # "//third_party/dart/runtime:libdart_precompiled_runtime",
        ]
      }
    }

    resources = common_libs
    resources += [
      {
        path = rebase_path("$root_out_dir/icudtl.dat")
        dest = "data/icudtl.dat"
      },
    ]
    if (enable_vulkan_validation_layers) {
      resources += vulkan_validation_libs + vulkan_icds
    }

    if (!invoker.aot) {
      resources += [
        {
          path = rebase_path(
                  "$target_gen_dir/kernel/vm_isolate_snapshot${_product_suffix}.bin")
          dest = "data/vm_snapshot_data.bin"
        },
        {
          path = rebase_path(
                  "$target_gen_dir/kernel/vm_snapshot_instructions${_product_suffix}.bin")
          dest = "data/vm_snapshot_instructions.bin"
        },
        {
          path = rebase_path(
                  "$target_gen_dir/kernel/isolate_snapshot${_product_suffix}.bin")
          dest = "data/isolate_core_snapshot_data.bin"
        },
        {
          path = rebase_path(
                  "$target_gen_dir/kernel/isolate_snapshot_instructions${_product_suffix}.bin")
          dest = "data/isolate_core_snapshot_instructions.bin"
        },
      ]
    }
    if (!invoker.product) {
      resources += [
        {
          path = rebase_path(observatory_archive_file)
          dest = "data/observatory.tar"
        },
        {
          path = rebase_path(
                  get_label_info(
                      "//flutter/shell/platform/fuchsia/runtime/dart/profiler_symbols:${_runner_basename}_runner",
                      "target_gen_dir") +
                  "/${_runner_basename}_runner.dartprofilersymbols")
          dest = "data/${_runner_basename}_runner.dartprofilersymbols"
        },
      ]
    }
  }

  fuchsia_package(target_name) {
    data_deps = [ ":" + target_name + "_component" ]
  }
}

flutter_runner_package("flutter_aot_runner") {
  aot = true
  product = false
}

flutter_runner_package("flutter_aot_product_runner") {
  aot = true
  product = true
}

flutter_runner_package("flutter_jit_runner") {
  aot = false
  product = false
}

flutter_runner_package("flutter_jit_product_runner") {
  aot = false
  product = true
}

if (enable_unittests) {
  test_fixtures("flutter_runner_fixtures") {
    fixtures = []
  }

  executable("flutter_runner_unittests") {
    testonly = true

    sources = [
      "accessibility_bridge_unittest.cc",
      "component_v1_unittest.cc",
      "flutter_runner_fakes.h",
      "focus_delegate_unittests.cc",
      "fuchsia_intl_unittest.cc",
      "keyboard_unittest.cc",
      "platform_view_unittest.cc",
      "pointer_delegate_unittests.cc",
      "runner_unittest.cc",
      "tests/engine_unittests.cc",
      "tests/fake_flatland_unittests.cc",
      "tests/fake_session_unittests.cc",
      "tests/flatland_connection_unittests.cc",
      "tests/flatland_external_view_embedder_unittests.cc",
      "tests/flutter_runner_product_configuration_unittests.cc",
      "tests/gfx_external_view_embedder_unittests.cc",
      "tests/gfx_session_connection_unittests.cc",
      "tests/pointer_event_utility.cc",
      "tests/pointer_event_utility.h",
      "vsync_waiter_unittest.cc",
    ]

    # This is needed for //third_party/googletest for linking zircon symbols.
    libs = [ "$fuchsia_sdk_path/arch/$target_cpu/sysroot/lib/libzircon.so" ]

    # The use of these dependencies is temporary and will be moved behind the
    # embedder API.
    flutter_deps = [
      "//flutter/assets:assets",
      "//flutter/common/graphics",
      "//flutter/flow",
      "//flutter/lib/ui",
      "//flutter/shell/common",
    ]

    deps = [
             "tests/fakes",
             ":flutter_runner_fixtures",
             ":flutter_jit_runner_lib",
             "//build/fuchsia/pkg:async-testing",
             "//build/fuchsia/pkg:sys_cpp_testing",
             "//flutter/testing",
           ] + flutter_deps
  }

  executable("flutter_runner_tzdata_unittests") {
    testonly = true

    sources = [ "runner_tzdata_unittest.cc" ]

    # This is needed for //third_party/googletest for linking zircon symbols.
    libs = [ "$fuchsia_sdk_path/arch/$target_cpu/sysroot/lib/libzircon.so" ]

    # The use of these dependencies is temporary and will be moved behind the
    # embedder API.
    flutter_deps = [ "//flutter/lib/ui" ]

    deps = [
             ":flutter_runner_fixtures",
             ":flutter_jit_runner_lib",
             "//flutter/testing",
           ] + flutter_deps
  }

  template("fuchsia_test_package") {
    assert(defined(invoker.data_deps), "data_deps is not defined.")

    _test_name = target_name

    # TODO(fxbug.dev/79873): Remove cmx option after engine_unittests.cc is
    # ported to use FakeScenic or the dependency is broken.
    _include_v1_manifest = false
    if (defined(invoker.manifest_v1)) {
      _include_v1_manifest = true
    }

    fuchsia_component(target_name + "_component") {
      testonly = true

      manifest = "meta/${_test_name}.cml"

      if (defined(invoker.data_deps)) {
        data_deps = invoker.data_deps
      }

      resources = common_libs
      resources += [
        {
          path = rebase_path("$root_out_dir/icudtl.dat")
          dest = "data/icudtl.dat"
        },
      ]
      if (defined(invoker.resources)) {
        resources += invoker.resources
      }
    }
    if (_include_v1_manifest) {
      fuchsia_component(target_name + "_v1_component") {
        testonly = true

        manifest = invoker.manifest_v1
        manifest_output_name = "${_test_name}"

        if (defined(invoker.data_deps)) {
          data_deps = invoker.data_deps
        }

        resources = common_libs
        resources += [
          {
            path = rebase_path("$root_out_dir/icudtl.dat")
            dest = "data/icudtl.dat"
          },
        ]
        if (defined(invoker.resources)) {
          resources += invoker.resources
        }
      }
    }

    fuchsia_package(target_name) {
      testonly = true

      deps = [ ":${target_name}_component" ]
      if (_include_v1_manifest) {
        deps += [ ":${target_name}_v1_component" ]
      }
    }
  }

  fuchsia_test_package("flutter_runner_tests") {
    data_deps = [ ":flutter_runner_unittests" ]

    manifest_v1 = "meta/flutter_runner_tests.cmx"

    resources = [
      {
        path = rebase_path(
                "//flutter/shell/platform/fuchsia/flutter/tests/tzdata/2019a/44/le/metaZones.res")
        dest = "data/tzdata/metaZones.res"
      },
      {
        path = rebase_path(
                "//flutter/shell/platform/fuchsia/flutter/tests/tzdata/2019a/44/le/timezoneTypes.res")
        dest = "data/tzdata/timezoneTypes.res"
      },
      {
        path = rebase_path(
                "//flutter/shell/platform/fuchsia/flutter/tests/tzdata/2019a/44/le/zoneinfo64.res")
        dest = "data/tzdata/zoneinfo64.res"
      },
    ]
  }

  fuchsia_test_package("flutter_runner_tzdata_tests") {
    data_deps = [ ":flutter_runner_tzdata_unittests" ]
  }

  fuchsia_test_package("fml_tests") {
    data_deps = [ "//flutter/fml:fml_unittests" ]
  }

  fuchsia_test_package("flow_tests") {
    data_deps = [ "//flutter/flow:flow_unittests" ]

    resources = [
      {
        path = rebase_path(
                "//flutter/testing/resources/performance_overlay_gold_60fps.png")
        dest =
            "data/flutter/testing/resources/performance_overlay_gold_60fps.png"
      },
      {
        path = rebase_path(
                "//flutter/testing/resources/performance_overlay_gold_90fps.png")
        dest =
            "data/flutter/testing/resources/performance_overlay_gold_90fps.png"
      },
      {
        path = rebase_path(
                "//flutter/testing/resources/performance_overlay_gold_120fps.png")
        dest =
            "data/flutter/testing/resources/performance_overlay_gold_120fps.png"
      },
    ]
  }

  fuchsia_test_package("runtime_tests") {
    data_deps = [
      "//flutter/runtime:runtime_fixtures",
      "//flutter/runtime:runtime_unittests",
    ]

    # TODO(gw280): https://github.com/flutter/flutter/issues/50294
    # Right now we need to manually specify all the fixtures that are
    # declared in the test_fixtures() call above.
    resources = [
      {
        path = "$root_gen_dir/flutter/runtime/assets/kernel_blob.bin"
        dest = "data/assets/kernel_blob.bin"
      },
    ]
  }

  fuchsia_test_package("shell_tests") {
    data_deps = [
      "//flutter/shell/common:shell_unittests",
      "//flutter/shell/common:shell_unittests_fixtures",
    ]

    # TODO(gw280): https://github.com/flutter/flutter/issues/50294
    # Right now we need to manually specify all the fixtures that are
    # declared in the test_fixtures() call above.
    resources = [
                  {
                    path = "$root_gen_dir/flutter/shell/common/assets/kernel_blob.bin"
                    dest = "data/assets/kernel_blob.bin"
                  },
                  {
                    path = "$root_gen_dir/flutter/shell/common/assets/shelltest_screenshot.png"
                    dest = "data/assets/shelltest_screenshot.png"
                  },
                ] + vulkan_validation_libs + vulkan_icds
  }

  fuchsia_test_package("testing_tests") {
    data_deps = [ "//flutter/testing:testing_unittests" ]
  }

  fuchsia_test_package("txt_tests") {
    data_deps = [ "//flutter/third_party/txt:txt_unittests" ]
  }

  fuchsia_test_package("ui_tests") {
    data_deps = [
      "//flutter/lib/ui:ui_unittests",
      "//flutter/lib/ui:ui_unittests_fixtures",
    ]

    # TODO(gw280): https://github.com/flutter/flutter/issues/50294
    # Right now we need to manually specify all the fixtures that are
    # declared in the test_fixtures() call above.
    resources =
        [
          {
            path = "$root_gen_dir/flutter/lib/ui/assets/kernel_blob.bin"
            dest = "data/assets/kernel_blob.bin"
          },
          {
            path = "$root_gen_dir/flutter/lib/ui/assets/DashInNooglerHat.jpg"
            dest = "data/assets/DashInNooglerHat.jpg"
          },
          {
            path = "$root_gen_dir/flutter/lib/ui/assets/Horizontal.jpg"
            dest = "data/assets/Horizontal.jpg"
          },
          {
            path = "$root_gen_dir/flutter/lib/ui/assets/Horizontal.png"
            dest = "data/assets/Horizontal.png"
          },
          {
            path = "$root_gen_dir/flutter/lib/ui/assets/hello_loop_2.gif"
            dest = "data/assets/hello_loop_2.gif"
          },
          {
            path = "$root_gen_dir/flutter/lib/ui/assets/hello_loop_2.webp"
            dest = "data/assets/hello_loop_2.webp"
          },
        ] + vulkan_validation_libs + vulkan_icds
  }

  fuchsia_test_package("embedder_tests") {
    data_deps = [
      "//flutter/shell/platform/embedder:embedder_unittests",
      "//flutter/shell/platform/embedder:fixtures",
    ]

    # TODO(gw280): https://github.com/flutter/flutter/issues/50294
    # Right now we need to manually specify all the fixtures that are
    # declared in the test_fixtures() call above.
    resources = [
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/kernel_blob.bin"
        dest = "data/assets/kernel_blob.bin"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/arc_end_caps.png"
        dest = "data/assets/arc_end_caps.png"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/compositor.png"
        dest = "data/assets/compositor.png"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/compositor_root_surface_xformation.png"
        dest = "data/assets/compositor_root_surface_xformation.png"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/compositor_software.png"
        dest = "data/assets/compositor_software.png"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/compositor_with_platform_layer_on_bottom.png"
        dest = "data/assets/compositor_with_platform_layer_on_bottom.png"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/compositor_with_root_layer_only.png"
        dest = "data/assets/compositor_with_root_layer_only.png"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/dpr_noxform.png"
        dest = "data/assets/dpr_noxform.png"
      },
      {
        path =
            "$root_gen_dir/flutter/shell/platform/embedder/assets/dpr_xform.png"
        dest = "data/assets/dpr_xform.png"
      },
      {
        path =
            "$root_gen_dir/flutter/shell/platform/embedder/assets/gradient.png"
        dest = "data/assets/gradient.png"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/gradient_xform.png"
        dest = "data/assets/gradient_xform.png"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/scene_without_custom_compositor.png"
        dest = "data/assets/scene_without_custom_compositor.png"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/scene_without_custom_compositor_with_xform.png"
        dest = "data/assets/scene_without_custom_compositor_with_xform.png"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/snapshot_large_scene.png"
        dest = "data/assets/snapshot_large_scene.png"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/verifyb143464703.png"
        dest = "data/assets/verifyb143464703.png"
      },
      {
        path = "$root_gen_dir/flutter/shell/platform/embedder/assets/verifyb143464703_soft_noxform.png"
        dest = "data/assets/verifyb143464703_soft_noxform.png"
      },
    ]
  }

  fuchsia_test_package("dart_utils_tests") {
    data_deps = [ "//flutter/shell/platform/fuchsia/runtime/dart/utils:dart_utils_unittests" ]
  }

  # When adding a new dep here, please also ensure the dep is added to
  # testing/fuchsia/run_tests.sh and testing/fuchsia/test_fars
  group("tests") {
    testonly = true

    deps = [
      ":dart_utils_tests",
      ":embedder_tests",
      ":flow_tests",
      ":flutter_runner_tests",
      ":flutter_runner_tzdata_tests",
      ":fml_tests",
      ":runtime_tests",
      ":shell_tests",
      ":testing_tests",
      ":txt_tests",
      ":ui_tests",
    ]
  }
}
