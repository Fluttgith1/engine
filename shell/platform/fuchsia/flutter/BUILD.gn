# Copyright 2013 The Flutter Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(is_fuchsia)

import("//build/fuchsia/sdk.gni")
import("//flutter/common/config.gni")
import("//flutter/testing/testing.gni")
import("//flutter/tools/fuchsia/dart.gni")
import("//flutter/tools/fuchsia/fuchsia_archive.gni")
import("//flutter/tools/fuchsia/fuchsia_libs.gni")
import("//flutter/vulkan/config.gni")

source_set("flutter_runner_sources") {
  sources = [
    "component.cc",
    "component.h",
    "isolate_configurator.cc",
    "isolate_configurator.h",
    "main.cc",
    "runner.cc",
    "runner.h",
    "thread.cc",
    "thread.h",
    "unique_fdio_ns.h",
  ]

  # The use of these dependencies is temporary and will be moved behind the
  # embedder API.
  flutter_legacy_deps = [ "//flutter/fml" ]

  deps = [
    "compositor",
    "//flutter/shell/platform/embedder:api",
    "//flutter/shell/platform/fuchsia/dart-pkg/fuchsia",
    "//flutter/shell/platform/fuchsia/dart-pkg/zircon",
    "//flutter/shell/platform/fuchsia/runtime/dart/utils",
    "//flutter/third_party/tonic",
    "//third_party/icu",
    "//third_party/skia",
    "$fuchsia_sdk_root/fidl:fuchsia.fonts",
    "$fuchsia_sdk_root/fidl:fuchsia.intl",
    "$fuchsia_sdk_root/fidl:fuchsia.io",
    "$fuchsia_sdk_root/fidl:fuchsia.mem",
    "$fuchsia_sdk_root/fidl:fuchsia.sys",
    "$fuchsia_sdk_root/pkg:async-default",
    "$fuchsia_sdk_root/pkg:fidl_cpp",
    "$fuchsia_sdk_root/pkg:sys_cpp",
    "$fuchsia_sdk_root/pkg:trace",
    "$fuchsia_sdk_root/pkg:trace-engine",
    "$fuchsia_sdk_root/pkg:trace-provider-so",
  ] + flutter_legacy_deps
}

# Builds a flutter_runner
#
# Parameters:
#
#  output_name (required):
#    The name of the resulting binary.
#
#  product (required):
#    Whether to link against a Product mode Dart VM.

#  extra_deps (optional):
#    Any additional dependencies.
#
#  extra_defines (optional):
#    Any additional preprocessor defines.
template("flutter_runner") {
  assert(defined(invoker.output_name), "flutter_runner must define output_name")
  assert(defined(invoker.product), "flutter_runner must define product")

  invoker_output_name = invoker.output_name

  extra_deps = []
  if (defined(invoker.extra_deps)) {
    extra_deps += invoker.extra_deps
  }

  extra_defines = []
  if (defined(invoker.extra_defines)) {
    extra_defines += invoker.extra_defines
  }

  executable(target_name) {
    output_name = invoker_output_name

    defines = extra_defines

    libs = []

    deps = [
             ":flutter_runner_sources",
             "//flutter/shell/platform/embedder",
           ] + extra_deps

    # The flags below are needed so that Dart's CPU profiler can walk the
    # C++ stack.
    cflags = [ "-fno-omit-frame-pointer" ]

    if (!invoker.product) {
      # This flag is needed so that the call to dladdr() in Dart's native symbol
      # resolver can report good symbol information for the CPU profiler.
      ldflags = [ "-rdynamic" ]
    }
  }
}

# Things that explicitly being excluded:
# 1. Kernel snapshot framework mode.
# 2. Profiler symbols.

test_fixtures("flutter_runner_fixtures") {
  fixtures = []
}

# TODO
# executable("flutter_runner_unittests") {
#   testonly = true

#   output_name = "flutter_runner_tests"

#   sources = [
#     #"fuchsia_intl_unittest.cc",
#     "runner_unittest.cc",
#   ]

#   # This is needed for //third_party/googletest for linking zircon symbols.
#   libs = [ "//fuchsia/sdk/$host_os/arch/$target_cpu/sysroot/lib/libzircon.so" ]

#   deps = [
#     ":flutter_runner_fixtures",
#     ":flutter_runner_sources",
#     "//build/fuchsia/pkg:sys_cpp_testing",
#     "//flutter/testing",
#     "//third_party/icu:icui18n",
#   ]
# }

# TODO
# executable("flutter_runner_tzdata_unittests") {
#   testonly = true

#   output_name = "flutter_runner_tzdata_tests"

#   sources = [
#     "runner_tzdata_unittest.cc",
#   ]

#   # This is needed for //third_party/googletest for linking zircon symbols.
#   libs = [ "//fuchsia/sdk/$host_os/arch/$target_cpu/sysroot/lib/libzircon.so" ]

#   deps = [
#     ":flutter_runner_fixtures",
#     ":flutter_runner_sources",
#     "//third_party/icu:icui18n",
#   ]
# }

# TODO
# executable("flutter_runner_scenic_unittests") {
#   testonly = true

#   output_name = "flutter_runner_scenic_tests"

#   sources = [
#     "tests/session_connection_unittests.cc",
#   ]

#   # This is needed for //third_party/googletest for linking zircon symbols.
#   libs = [ "//fuchsia/sdk/$host_os/arch/$target_cpu/sysroot/lib/libzircon.so" ]

#   deps = [
#     ":flutter_runner_fixtures",
#     ":flutter_runner_sources",
#     "//build/fuchsia/pkg:sys_cpp_testing",
#     "//flutter/testing",
#   ]
# }

flutter_runner("jit") {
  output_name = "flutter_jit_runner"
  product = false

  extra_defines = []
  if (flutter_runtime_mode == "profile") {
    extra_defines += [ "FLUTTER_PROFILE" ]
  }

  if (enable_vulkan_validation_layers) {
    extra_defines += [ "VULKAN_VALIDATION_LAYERS_ENABLED" ]
  }
}

flutter_runner("jit_product") {
  output_name = "flutter_jit_product_runner"
  product = true

  extra_defines = [ "DART_PRODUCT" ]

  if (enable_vulkan_validation_layers) {
    extra_defines += [ "VULKAN_VALIDATION_LAYERS_ENABLED" ]
  }
}

flutter_runner("aot") {
  output_name = "flutter_aot_runner"
  product = false

  extra_defines = []
  if (flutter_runtime_mode == "profile") {
    extra_defines += [ "FLUTTER_PROFILE" ]
  }

  if (enable_vulkan_validation_layers) {
    extra_defines += [ "VULKAN_VALIDATION_LAYERS_ENABLED" ]
  }
}

flutter_runner("aot_product") {
  output_name = "flutter_aot_product_runner"
  product = true

  extra_defines = [ "DART_PRODUCT" ]

  if (enable_vulkan_validation_layers) {
    extra_defines += [ "VULKAN_VALIDATION_LAYERS_ENABLED" ]
  }
}

template("jit_runner") {
  product = defined(invoker.product) && invoker.product

  product_suffix = ""

  if (product) {
    product_suffix = "_product"
  }

  fuchsia_archive(target_name) {
    snapshot_label = "kernel:kernel_core_snapshot${product_suffix}"
    snapshot_gen_dir = get_label_info(snapshot_label, "target_gen_dir")

    deps = [
      ":jit${product_suffix}",
      snapshot_label,
    ]

    if (!product) {
      deps += [
        "//flutter/shell/platform/fuchsia/runtime/dart/profiler_symbols:flutter_jit_runner",
        observatory_target,
      ]
    }

    binary = "flutter_jit${product_suffix}_runner"

    meta_dir = "//flutter/shell/platform/fuchsia/flutter/meta"

    resources = [
      {
        path = rebase_path("//third_party/icu/common/icudtl.dat")
        dest = "icudtl.dat"
      },
    ]

    if (!product) {
      resources += [
        {
          path = rebase_path(observatory_archive_file)
          dest = "observatory.tar"
        },
        {
          path = rebase_path(
                  get_label_info(
                      "//flutter/shell/platform/fuchsia/runtime/dart/profiler_symbols:flutter_jit_runner",
                      "target_gen_dir") +
                  "/flutter_jit_runner.dartprofilersymbols")
          dest = "flutter_jit_runner.dartprofilersymbols"
        },
      ]
    }

    resources += [
      {
        path = rebase_path(
                "$snapshot_gen_dir/vm_isolate_snapshot${product_suffix}.bin")
        dest = "vm_snapshot_data.bin"
      },
      {
        path = rebase_path(
                "$snapshot_gen_dir/vm_snapshot_instructions${product_suffix}.bin")
        dest = "vm_snapshot_instructions.bin"
      },
      {
        path = rebase_path(
                "$snapshot_gen_dir/isolate_snapshot${product_suffix}.bin")
        dest = "isolate_core_snapshot_data.bin"
      },
      {
        path = rebase_path(
                "$snapshot_gen_dir/isolate_snapshot_instructions${product_suffix}.bin")
        dest = "isolate_core_snapshot_instructions.bin"
      },
    ]

    _vulkan_icds = []
    _libs = common_libs
    if (enable_vulkan_validation_layers) {
      _libs += vulkan_validation_libs
      _vulkan_icds += vulkan_icds
    }

    resources += _vulkan_icds

    libraries = _libs

    meta = [
      {
        path = rebase_path("meta/flutter_jit${product_suffix}_runner.cmx")
        dest = "flutter_jit${product_suffix}_runner.cmx"
      },
    ]
  }
}

template("aot_runner") {
  product = defined(invoker.product) && invoker.product
  product_suffix = ""
  if (product) {
    product_suffix = "_product"
  }

  fuchsia_archive(target_name) {
    deps = [
      ":aot${product_suffix}",
    ]

    if (!product) {
      deps += [
        "//flutter/shell/platform/fuchsia/runtime/dart/profiler_symbols:flutter_aot_runner",
        observatory_target,
      ]
    }

    meta_dir = "//flutter/shell/platform/fuchsia/flutter/meta"

    binary = "flutter_aot${product_suffix}_runner"

    resources = [
      {
        path = rebase_path("//third_party/icu/common/icudtl.dat")
        dest = "icudtl.dat"
      },
    ]

    if (!product) {
      resources += [
        {
          path = rebase_path(observatory_archive_file)
          dest = "observatory.tar"
        },
        {
          path = rebase_path(
                  get_label_info(
                      "//flutter/shell/platform/fuchsia/runtime/dart/profiler_symbols:flutter_aot_runner",
                      "target_gen_dir") +
                  "/flutter_aot_runner.dartprofilersymbols")
          dest = "flutter_aot_runner.dartprofilersymbols"
        },
      ]
    }

    _vulkan_icds = []
    _libs = common_libs
    if (enable_vulkan_validation_layers) {
      _libs += vulkan_validation_libs
      _vulkan_icds += vulkan_icds
    }

    resources += _vulkan_icds

    libraries = _libs

    meta = [
      {
        path = rebase_path("meta/flutter_aot${product_suffix}_runner.cmx")
        dest = "flutter_aot${product_suffix}_runner.cmx"
      },
    ]
  }
}

aot_runner("flutter_aot_runner") {
  product = false
}

aot_runner("flutter_aot_product_runner") {
  product = true
}

jit_runner("flutter_jit_runner") {
  product = false
}

jit_runner("flutter_jit_product_runner") {
  product = true
}

# TODO
# fuchsia_archive("flutter_runner_tests") {
#   testonly = true

#   deps = [
#     ":flutter_runner_unittests",
#   ]

#   binary = "$target_name"

#   resources = [
#     {
#       path = rebase_path("//third_party/icu/common/icudtl.dat")
#       dest = "icudtl.dat"
#     },
#     {
#       path = rebase_path(
#               "//flutter/shell/platform/fuchsia/flutter/tests/tzdata/2019a/44/le/metaZones.res")
#       dest = "tzdata/metaZones.res"
#     },
#     {
#       path = rebase_path(
#               "//flutter/shell/platform/fuchsia/flutter/tests/tzdata/2019a/44/le/timezoneTypes.res")
#       dest = "tzdata/timezoneTypes.res"
#     },
#     {
#       path = rebase_path(
#               "//flutter/shell/platform/fuchsia/flutter/tests/tzdata/2019a/44/le/zoneinfo64.res")
#       dest = "tzdata/zoneinfo64.res"
#     },
#   ]

#   meta_dir = "//flutter/shell/platform/fuchsia/flutter/meta"

#   libraries = common_libs

#   meta = [
#     {
#       path = rebase_path("meta/$target_name.cmx")
#       dest = "$target_name.cmx"
#     },
#   ]
# }

# TODO
# fuchsia_archive("flutter_runner_tzdata_tests") {
#   testonly = true

#   deps = [
#     ":flutter_runner_tzdata_unittests",
#   ]

#   binary = "$target_name"

#   resources = [
#     {
#       path = rebase_path("//third_party/icu/common/icudtl.dat")
#       dest = "icudtl.dat"
#     },
#   ]

#   meta_dir = "//flutter/shell/platform/fuchsia/flutter/meta"

#   libraries = common_libs

#   meta = [
#     {
#       path = rebase_path("meta/$target_name.cmx")
#       dest = "$target_name.cmx"
#     },
#   ]
# }

# TODO
# fuchsia_archive("flutter_runner_scenic_tests") {
#   testonly = true

#   deps = [
#     ":flutter_runner_scenic_unittests",
#   ]

#   binary = "$target_name"

#   resources = [
#     {
#       path = rebase_path("//third_party/icu/common/icudtl.dat")
#       dest = "icudtl.dat"
#     },
#   ]

#   meta_dir = "//flutter/shell/platform/fuchsia/flutter/meta"

#   libraries = common_libs

#   meta = [
#     {
#       path = rebase_path("meta/$target_name.cmx")
#       dest = "$target_name.cmx"
#     },
#   ]
# }
