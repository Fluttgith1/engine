// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/**
 * Maps macOS-specific key code values representing [PhysicalKeyboardKey].
 *
 * MacOS doesn't provide a scan code, but a virtual keycode to represent a physical key.
 */
extern const NSDictionary* keyCodeToPhysicalKey;

/**
 * A map of macOS key codes which have printable representations, but appear
 * on the number pad. Used to provide different key objects for keys like
 * KEY_EQUALS and NUMPAD_EQUALS.
 */
extern const NSDictionary* keyCodeToNumpad;

/**
 * A map of macOS key codes which are numbered function keys, so that they
 * can be excluded when asking "is the Fn modifier down?".
 */
extern const NSDictionary* keyCodeToFunctionKey;

// Several mask constants. See KeyCodeMap.mm for their descriptions.

extern const uint64_t kValueMask;
extern const uint64_t kPlatformMask;
extern const uint64_t kUnicodePlane;
extern const uint64_t kHidPlane;
extern const uint64_t kAutogeneratedMask;
extern const uint64_t kSynonymMask;

/**
 * The code prefix for keys from macOS which do not have a Unicode
 * representation.
 */
static const uint64_t kMacosPlane = 0x00500000000;

/**
 * Map the physical key code of a key to that of its sibling key.
 *
 * A sibling key is the other key of a pair of keys that share the same modifier
 * flag, such as left and right shift keys.
 */
extern const NSDictionary* siblingPhysicalKeys;

/**
 * Map the physical key code of a key to its corresponding bitmask of
 * NSEventModifierFlags.
 *
 * This does not include CapsLock, for it is handled specially. Other modifier
 * keys do not seem to be needed either.
 */
extern const NSDictionary* modiferFlags;

/**
 * The physical key for CapsLock, which needs special handling.
 *
 * This should be kept up to date with KeyCodeMap.mm
 */
extern const uint64_t kCapsLockPhysicalKey;
