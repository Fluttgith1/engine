// Copyright 2014 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <map>

// DO NOT EDIT -- DO NOT EDIT -- DO NOT EDIT
// This file is generated by flutter/flutter@dev/tools/gen_keycodes/bin/gen_keycodes.dart and
// should not be edited directly.
//
// Edit the template dev/tools/gen_keycodes/data/keyboard_map_ios_cc.tmpl instead.
// See dev/tools/gen_keycodes/README.md for more information.

// Maps macOS-specific key code values representing [PhysicalKeyboardKey].
//
// iOS doesn't provide a scan code, but a virtual keycode to represent a physical key.
const std::map<int, int> g_ios_to_physical_key = {
  { 0x00000000, 0x00070000 },    // usbReserved
  { 0x00000001, 0x00070001 },    // usbErrorRollOver
  { 0x00000002, 0x00070002 },    // usbPostFail
  { 0x00000003, 0x00070003 },    // usbErrorUndefined
  { 0x00000004, 0x00070004 },    // keyA
  { 0x00000005, 0x00070005 },    // keyB
  { 0x00000006, 0x00070006 },    // keyC
  { 0x00000007, 0x00070007 },    // keyD
  { 0x00000008, 0x00070008 },    // keyE
  { 0x00000009, 0x00070009 },    // keyF
  { 0x0000000a, 0x0007000a },    // keyG
  { 0x0000000b, 0x0007000b },    // keyH
  { 0x0000000c, 0x0007000c },    // keyI
  { 0x0000000d, 0x0007000d },    // keyJ
  { 0x0000000e, 0x0007000e },    // keyK
  { 0x0000000f, 0x0007000f },    // keyL
  { 0x00000010, 0x00070010 },    // keyM
  { 0x00000011, 0x00070011 },    // keyN
  { 0x00000012, 0x00070012 },    // keyO
  { 0x00000013, 0x00070013 },    // keyP
  { 0x00000014, 0x00070014 },    // keyQ
  { 0x00000015, 0x00070015 },    // keyR
  { 0x00000016, 0x00070016 },    // keyS
  { 0x00000017, 0x00070017 },    // keyT
  { 0x00000018, 0x00070018 },    // keyU
  { 0x00000019, 0x00070019 },    // keyV
  { 0x0000001a, 0x0007001a },    // keyW
  { 0x0000001b, 0x0007001b },    // keyX
  { 0x0000001c, 0x0007001c },    // keyY
  { 0x0000001d, 0x0007001d },    // keyZ
  { 0x0000001e, 0x0007001e },    // digit1
  { 0x0000001f, 0x0007001f },    // digit2
  { 0x00000020, 0x00070020 },    // digit3
  { 0x00000021, 0x00070021 },    // digit4
  { 0x00000022, 0x00070022 },    // digit5
  { 0x00000023, 0x00070023 },    // digit6
  { 0x00000024, 0x00070024 },    // digit7
  { 0x00000025, 0x00070025 },    // digit8
  { 0x00000026, 0x00070026 },    // digit9
  { 0x00000027, 0x00070027 },    // digit0
  { 0x00000028, 0x00070028 },    // enter
  { 0x00000029, 0x00070029 },    // escape
  { 0x0000002a, 0x0007002a },    // backspace
  { 0x0000002b, 0x0007002b },    // tab
  { 0x0000002c, 0x0007002c },    // space
  { 0x0000002d, 0x0007002d },    // minus
  { 0x0000002e, 0x0007002e },    // equal
  { 0x0000002f, 0x0007002f },    // bracketLeft
  { 0x00000030, 0x00070030 },    // bracketRight
  { 0x00000031, 0x00070031 },    // backslash
  { 0x00000033, 0x00070033 },    // semicolon
  { 0x00000034, 0x00070034 },    // quote
  { 0x00000035, 0x00070035 },    // backquote
  { 0x00000036, 0x00070036 },    // comma
  { 0x00000037, 0x00070037 },    // period
  { 0x00000038, 0x00070038 },    // slash
  { 0x00000039, 0x00070039 },    // capsLock
  { 0x0000003a, 0x0007003a },    // f1
  { 0x0000003b, 0x0007003b },    // f2
  { 0x0000003c, 0x0007003c },    // f3
  { 0x0000003d, 0x0007003d },    // f4
  { 0x0000003e, 0x0007003e },    // f5
  { 0x0000003f, 0x0007003f },    // f6
  { 0x00000040, 0x00070040 },    // f7
  { 0x00000041, 0x00070041 },    // f8
  { 0x00000042, 0x00070042 },    // f9
  { 0x00000043, 0x00070043 },    // f10
  { 0x00000044, 0x00070044 },    // f11
  { 0x00000045, 0x00070045 },    // f12
  { 0x00000046, 0x00070046 },    // printScreen
  { 0x00000047, 0x00070047 },    // scrollLock
  { 0x00000048, 0x00070048 },    // pause
  { 0x00000049, 0x00070049 },    // insert
  { 0x0000004a, 0x0007004a },    // home
  { 0x0000004b, 0x0007004b },    // pageUp
  { 0x0000004c, 0x0007004c },    // delete
  { 0x0000004d, 0x0007004d },    // end
  { 0x0000004e, 0x0007004e },    // pageDown
  { 0x0000004f, 0x0007004f },    // arrowRight
  { 0x00000050, 0x00070050 },    // arrowLeft
  { 0x00000051, 0x00070051 },    // arrowDown
  { 0x00000052, 0x00070052 },    // arrowUp
  { 0x00000053, 0x00070053 },    // numLock
  { 0x00000054, 0x00070054 },    // numpadDivide
  { 0x00000055, 0x00070055 },    // numpadMultiply
  { 0x00000056, 0x00070056 },    // numpadSubtract
  { 0x00000057, 0x00070057 },    // numpadAdd
  { 0x00000058, 0x00070058 },    // numpadEnter
  { 0x00000059, 0x00070059 },    // numpad1
  { 0x0000005a, 0x0007005a },    // numpad2
  { 0x0000005b, 0x0007005b },    // numpad3
  { 0x0000005c, 0x0007005c },    // numpad4
  { 0x0000005d, 0x0007005d },    // numpad5
  { 0x0000005e, 0x0007005e },    // numpad6
  { 0x0000005f, 0x0007005f },    // numpad7
  { 0x00000060, 0x00070060 },    // numpad8
  { 0x00000061, 0x00070061 },    // numpad9
  { 0x00000062, 0x00070062 },    // numpad0
  { 0x00000063, 0x00070063 },    // numpadDecimal
  { 0x00000064, 0x00070064 },    // intlBackslash
  { 0x00000065, 0x00070065 },    // contextMenu
  { 0x00000066, 0x00070066 },    // power
  { 0x00000067, 0x00070067 },    // numpadEqual
  { 0x00000068, 0x00070068 },    // f13
  { 0x00000069, 0x00070069 },    // f14
  { 0x0000006a, 0x0007006a },    // f15
  { 0x0000006b, 0x0007006b },    // f16
  { 0x0000006c, 0x0007006c },    // f17
  { 0x0000006d, 0x0007006d },    // f18
  { 0x0000006e, 0x0007006e },    // f19
  { 0x0000006f, 0x0007006f },    // f20
  { 0x00000070, 0x00070070 },    // f21
  { 0x00000071, 0x00070071 },    // f22
  { 0x00000072, 0x00070072 },    // f23
  { 0x00000073, 0x00070073 },    // f24
  { 0x00000074, 0x00070074 },    // open
  { 0x00000075, 0x00070075 },    // help
  { 0x00000077, 0x00070077 },    // select
  { 0x00000079, 0x00070079 },    // again
  { 0x0000007a, 0x0007007a },    // undo
  { 0x0000007b, 0x0007007b },    // cut
  { 0x0000007c, 0x0007007c },    // copy
  { 0x0000007d, 0x0007007d },    // paste
  { 0x0000007e, 0x0007007e },    // find
  { 0x0000007f, 0x0007007f },    // audioVolumeMute
  { 0x00000080, 0x00070080 },    // audioVolumeUp
  { 0x00000081, 0x00070081 },    // audioVolumeDown
  { 0x00000085, 0x00070085 },    // numpadComma
  { 0x00000087, 0x00070087 },    // intlRo
  { 0x00000088, 0x00070088 },    // kanaMode
  { 0x00000089, 0x00070089 },    // intlYen
  { 0x0000008a, 0x0007008a },    // convert
  { 0x0000008b, 0x0007008b },    // nonConvert
  { 0x00000090, 0x00070090 },    // lang1
  { 0x00000091, 0x00070091 },    // lang2
  { 0x00000092, 0x00070092 },    // lang3
  { 0x00000093, 0x00070093 },    // lang4
  { 0x00000094, 0x00070094 },    // lang5
  { 0x0000009b, 0x0007009b },    // abort
  { 0x000000a3, 0x000700a3 },    // props
  { 0x000000b6, 0x000700b6 },    // numpadParenLeft
  { 0x000000b7, 0x000700b7 },    // numpadParenRight
  { 0x000000bb, 0x000700bb },    // numpadBackspace
  { 0x000000d0, 0x000700d0 },    // numpadMemoryStore
  { 0x000000d1, 0x000700d1 },    // numpadMemoryRecall
  { 0x000000d2, 0x000700d2 },    // numpadMemoryClear
  { 0x000000d3, 0x000700d3 },    // numpadMemoryAdd
  { 0x000000d4, 0x000700d4 },    // numpadMemorySubtract
  { 0x000000d7, 0x000700d7 },    // numpadSignChange
  { 0x000000d8, 0x000700d8 },    // numpadClear
  { 0x000000d9, 0x000700d9 },    // numpadClearEntry
  { 0x000000e0, 0x000700e0 },    // controlLeft
  { 0x000000e1, 0x000700e1 },    // shiftLeft
  { 0x000000e2, 0x000700e2 },    // altLeft
  { 0x000000e3, 0x000700e3 },    // metaLeft
  { 0x000000e4, 0x000700e4 },    // controlRight
  { 0x000000e5, 0x000700e5 },    // shiftRight
  { 0x000000e6, 0x000700e6 },    // altRight
  { 0x000000e7, 0x000700e7 },    // metaRight
};

// A map of iOS key codes which have printable representations, but appear
// on the number pad. Used to provide different key objects for keys like
// KEY_EQUALS and NUMPAD_EQUALS.
const std::map<int, int> g_ios_numpad_map = {
  { 0x00000054, 0x0100070054 },    // numpadDivide
  { 0x00000055, 0x0100070055 },    // numpadMultiply
  { 0x00000056, 0x0100070056 },    // numpadSubtract
  { 0x00000057, 0x0100070057 },    // numpadAdd
  { 0x00000059, 0x0100070059 },    // numpad1
  { 0x0000005a, 0x010007005a },    // numpad2
  { 0x0000005b, 0x010007005b },    // numpad3
  { 0x0000005c, 0x010007005c },    // numpad4
  { 0x0000005d, 0x010007005d },    // numpad5
  { 0x0000005e, 0x010007005e },    // numpad6
  { 0x0000005f, 0x010007005f },    // numpad7
  { 0x00000060, 0x0100070060 },    // numpad8
  { 0x00000061, 0x0100070061 },    // numpad9
  { 0x00000062, 0x0100070062 },    // numpad0
  { 0x00000063, 0x0100070063 },    // numpadDecimal
  { 0x00000067, 0x0100070067 },    // numpadEqual
  { 0x00000085, 0x0100070085 },    // numpadComma
  { 0x000000b6, 0x01000700b6 },    // numpadParenLeft
  { 0x000000b7, 0x01000700b7 },    // numpadParenRight
};
