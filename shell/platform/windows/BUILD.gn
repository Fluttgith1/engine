# Copyright 2013 The Flutter Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

assert(is_win)

_public_headers = [ "public/flutter_windows.h" ]

_angle_dir = "//third_party/angle"

config("relative_angle_headers") {
  include_dirs = [ "$_angle_dir/include" ]
}

# Any files that are built by clients (client_wrapper code, library headers for
# implementations using this shared code, etc.) include the public headers
# assuming they are in the include path. This configuration should be added to
# any such code that is also built by GN to make the includes work.
config("relative_flutter_windows_headers") {
  include_dirs = [ "public" ]
}

# The headers are a separate source set since the client wrapper is allowed
# to depend on the public headers, but none of the rest of the code.
source_set("flutter_windows_headers") {
  public = _public_headers

  public_deps = [
    "$flutter_root/shell/platform/common/cpp:common_cpp_library_headers",
  ]

  configs += [
    "$flutter_root/shell/platform/common/cpp:desktop_library_implementation",
  ]

  public_configs = [
    "$flutter_root/shell/platform/common/cpp:relative_flutter_library_headers",
  ]
}

source_set("flutter_windows_source") {
  sources = [
    "angle_surface_manager.h",
    "angle_surface_manager.cc",
    "flutter_windows.cc",
    "flutter_window.h",
    "flutter_window.cc",
    "key_event_handler.h",
    "key_event_handler.cc",
    "keyboard_hook_handler.h",
    "platform_handler.h",
    "platform_handler.cc",
    "text_input_plugin.h",
    "text_input_plugin.cc",
    "win32_dpi_helper.h",
    "win32_dpi_helper.cc",
    "win32_window.h",
    "win32_window.cc",
    "window_state.h",
  ]

  defines = [ "USE_RAPID_JSON" ]

  configs += [
    "$flutter_root/shell/platform/common/cpp:desktop_library_implementation",
    "//third_party/angle:gl_prototypes",
  ]

  public_configs = [
     ":relative_angle_headers"
  ]

  deps = [
    ":flutter_windows_headers",
    "$flutter_root/shell/platform/common/cpp:common_cpp",
    "$flutter_root/shell/platform/common/cpp/client_wrapper:client_wrapper",
    "$flutter_root/shell/platform/embedder:embedder",
    "$flutter_root/shell/platform/windows/client_wrapper:client_wrapper_windows",
    "//third_party/angle:libEGL_static", # the order of libEGL_static and libGLESv2_static is important.. if reversed, will cause a linker error DllMain already defined in LIBCMTD.lib
    "//third_party/angle:libGLESv2_static",
    "//third_party/rapidjson",
  ]
}

copy("publish_headers_windows") {
  sources = _public_headers
  outputs = [
    "$root_out_dir/{{source_file_part}}",
  ]

  # The GLFW header assumes the presence of the common headers.
  deps = [
    "$flutter_root/shell/platform/common/cpp:publish_headers",
  ]
}

shared_library("flutter_windows_win32") {
#shared_library("flutter_windows") {
  deps = [
    ":flutter_windows_source",
    "$flutter_root/shell/platform/common/cpp/client_wrapper:publish_wrapper",
    ":publish_headers_windows",
    "$flutter_root/shell/platform/windows/client_wrapper:publish_wrapper_windows",
  ]

  public_configs = [ "$flutter_root:config" ]
}

shared_library("flutter_windows") {
  deps = [
    "$flutter_root/shell/platform/glfw:flutter_glfw",
  ]

  public_configs = [ "$flutter_root:config" ]
}

group("windows") {
  deps = [
    ":flutter_windows",
  ]
}
