// Copyright 2014 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <map>

// DO NOT EDIT -- DO NOT EDIT -- DO NOT EDIT
// This file is generated by flutter/flutter@dev/tools/gen_keycodes/bin/gen_keycodes.dart and
// should not be edited directly.
//
// Edit the template dev/tools/gen_keycodes/data/keyboard_map_windows_cc.tmpl instead.
// See dev/tools/gen_keycodes/README.md for more information.

/// Maps g_windows_to_physical_key specific key code values representing [PhysicalKeyboardKey].
const std::map<int, uint64_t> g_windows_to_physical_key = {
  { 57439, 0x00010082 },    // sleep
  { 57443, 0x00010083 },    // wakeUp
  { 255, 0x00070001 },    // usbErrorRollOver
  { 252, 0x00070002 },    // usbPostFail
  { 30, 0x00070004 },    // keyA
  { 48, 0x00070005 },    // keyB
  { 46, 0x00070006 },    // keyC
  { 32, 0x00070007 },    // keyD
  { 18, 0x00070008 },    // keyE
  { 33, 0x00070009 },    // keyF
  { 34, 0x0007000a },    // keyG
  { 35, 0x0007000b },    // keyH
  { 23, 0x0007000c },    // keyI
  { 36, 0x0007000d },    // keyJ
  { 37, 0x0007000e },    // keyK
  { 38, 0x0007000f },    // keyL
  { 50, 0x00070010 },    // keyM
  { 49, 0x00070011 },    // keyN
  { 24, 0x00070012 },    // keyO
  { 25, 0x00070013 },    // keyP
  { 16, 0x00070014 },    // keyQ
  { 19, 0x00070015 },    // keyR
  { 31, 0x00070016 },    // keyS
  { 20, 0x00070017 },    // keyT
  { 22, 0x00070018 },    // keyU
  { 47, 0x00070019 },    // keyV
  { 17, 0x0007001a },    // keyW
  { 45, 0x0007001b },    // keyX
  { 21, 0x0007001c },    // keyY
  { 44, 0x0007001d },    // keyZ
  { 2, 0x0007001e },    // digit1
  { 3, 0x0007001f },    // digit2
  { 4, 0x00070020 },    // digit3
  { 5, 0x00070021 },    // digit4
  { 6, 0x00070022 },    // digit5
  { 7, 0x00070023 },    // digit6
  { 8, 0x00070024 },    // digit7
  { 9, 0x00070025 },    // digit8
  { 10, 0x00070026 },    // digit9
  { 11, 0x00070027 },    // digit0
  { 28, 0x00070028 },    // enter
  { 1, 0x00070029 },    // escape
  { 14, 0x0007002a },    // backspace
  { 15, 0x0007002b },    // tab
  { 57, 0x0007002c },    // space
  { 12, 0x0007002d },    // minus
  { 13, 0x0007002e },    // equal
  { 26, 0x0007002f },    // bracketLeft
  { 27, 0x00070030 },    // bracketRight
  { 43, 0x00070031 },    // backslash
  { 39, 0x00070033 },    // semicolon
  { 40, 0x00070034 },    // quote
  { 41, 0x00070035 },    // backquote
  { 51, 0x00070036 },    // comma
  { 52, 0x00070037 },    // period
  { 53, 0x00070038 },    // slash
  { 58, 0x00070039 },    // capsLock
  { 59, 0x0007003a },    // f1
  { 60, 0x0007003b },    // f2
  { 61, 0x0007003c },    // f3
  { 62, 0x0007003d },    // f4
  { 63, 0x0007003e },    // f5
  { 64, 0x0007003f },    // f6
  { 65, 0x00070040 },    // f7
  { 66, 0x00070041 },    // f8
  { 67, 0x00070042 },    // f9
  { 68, 0x00070043 },    // f10
  { 87, 0x00070044 },    // f11
  { 88, 0x00070045 },    // f12
  { 57399, 0x00070046 },    // printScreen
  { 70, 0x00070047 },    // scrollLock
  { 69, 0x00070048 },    // pause
  { 57426, 0x00070049 },    // insert
  { 57415, 0x0007004a },    // home
  { 57417, 0x0007004b },    // pageUp
  { 57427, 0x0007004c },    // delete
  { 57423, 0x0007004d },    // end
  { 57425, 0x0007004e },    // pageDown
  { 57421, 0x0007004f },    // arrowRight
  { 57419, 0x00070050 },    // arrowLeft
  { 57424, 0x00070051 },    // arrowDown
  { 57416, 0x00070052 },    // arrowUp
  { 57413, 0x00070053 },    // numLock
  { 57397, 0x00070054 },    // numpadDivide
  { 55, 0x00070055 },    // numpadMultiply
  { 74, 0x00070056 },    // numpadSubtract
  { 78, 0x00070057 },    // numpadAdd
  { 57372, 0x00070058 },    // numpadEnter
  { 79, 0x00070059 },    // numpad1
  { 80, 0x0007005a },    // numpad2
  { 81, 0x0007005b },    // numpad3
  { 75, 0x0007005c },    // numpad4
  { 76, 0x0007005d },    // numpad5
  { 77, 0x0007005e },    // numpad6
  { 71, 0x0007005f },    // numpad7
  { 72, 0x00070060 },    // numpad8
  { 73, 0x00070061 },    // numpad9
  { 82, 0x00070062 },    // numpad0
  { 83, 0x00070063 },    // numpadDecimal
  { 86, 0x00070064 },    // intlBackslash
  { 57437, 0x00070065 },    // contextMenu
  { 57438, 0x00070066 },    // power
  { 89, 0x00070067 },    // numpadEqual
  { 100, 0x00070068 },    // f13
  { 101, 0x00070069 },    // f14
  { 102, 0x0007006a },    // f15
  { 103, 0x0007006b },    // f16
  { 104, 0x0007006c },    // f17
  { 105, 0x0007006d },    // f18
  { 106, 0x0007006e },    // f19
  { 107, 0x0007006f },    // f20
  { 108, 0x00070070 },    // f21
  { 109, 0x00070071 },    // f22
  { 110, 0x00070072 },    // f23
  { 118, 0x00070073 },    // f24
  { 57403, 0x00070075 },    // help
  { 57352, 0x0007007a },    // undo
  { 57367, 0x0007007b },    // cut
  { 57368, 0x0007007c },    // copy
  { 57354, 0x0007007d },    // paste
  { 57376, 0x0007007f },    // audioVolumeMute
  { 57392, 0x00070080 },    // audioVolumeUp
  { 57390, 0x00070081 },    // audioVolumeDown
  { 126, 0x00070085 },    // numpadComma
  { 115, 0x00070087 },    // intlRo
  { 112, 0x00070088 },    // kanaMode
  { 125, 0x00070089 },    // intlYen
  { 121, 0x0007008a },    // convert
  { 123, 0x0007008b },    // nonConvert
  { 114, 0x00070090 },    // lang1
  { 113, 0x00070091 },    // lang2
  { 120, 0x00070092 },    // lang3
  { 119, 0x00070093 },    // lang4
  { 29, 0x000700e0 },    // controlLeft
  { 42, 0x000700e1 },    // shiftLeft
  { 56, 0x000700e2 },    // altLeft
  { 57435, 0x000700e3 },    // metaLeft
  { 57373, 0x000700e4 },    // controlRight
  { 54, 0x000700e5 },    // shiftRight
  { 57400, 0x000700e6 },    // altRight
  { 57436, 0x000700e7 },    // metaRight
  { 57369, 0x000c00b5 },    // mediaTrackNext
  { 57360, 0x000c00b6 },    // mediaTrackPrevious
  { 57380, 0x000c00b7 },    // mediaStop
  { 57388, 0x000c00b8 },    // eject
  { 57378, 0x000c00cd },    // mediaPlayPause
  { 57453, 0x000c0183 },    // mediaSelect
  { 57452, 0x000c018a },    // launchMail
  { 57377, 0x000c0192 },    // launchApp2
  { 57451, 0x000c0194 },    // launchApp1
  { 57445, 0x000c0221 },    // browserSearch
  { 57394, 0x000c0223 },    // browserHome
  { 57450, 0x000c0224 },    // browserBack
  { 57449, 0x000c0225 },    // browserForward
  { 57448, 0x000c0226 },    // browserStop
  { 57447, 0x000c0227 },    // browserRefresh
  { 57446, 0x000c022a },    // browserFavorites
};

/// Maps Windows-specific key codes to the matching [LogicalKeyboardKey].
const std::map<int, uint64_t> g_windows_to_logical_key = {
  { 95, 0x0100010082 },    // sleep
  { 65, 0x0000000061 },    // keyA
  { 66, 0x0000000062 },    // keyB
  { 67, 0x0000000063 },    // keyC
  { 68, 0x0000000064 },    // keyD
  { 69, 0x0000000065 },    // keyE
  { 70, 0x0000000066 },    // keyF
  { 71, 0x0000000067 },    // keyG
  { 72, 0x0000000068 },    // keyH
  { 73, 0x0000000069 },    // keyI
  { 74, 0x000000006a },    // keyJ
  { 75, 0x000000006b },    // keyK
  { 76, 0x000000006c },    // keyL
  { 77, 0x000000006d },    // keyM
  { 78, 0x000000006e },    // keyN
  { 79, 0x000000006f },    // keyO
  { 80, 0x0000000070 },    // keyP
  { 81, 0x0000000071 },    // keyQ
  { 82, 0x0000000072 },    // keyR
  { 83, 0x0000000073 },    // keyS
  { 84, 0x0000000074 },    // keyT
  { 85, 0x0000000075 },    // keyU
  { 86, 0x0000000076 },    // keyV
  { 87, 0x0000000077 },    // keyW
  { 88, 0x0000000078 },    // keyX
  { 89, 0x0000000079 },    // keyY
  { 90, 0x000000007a },    // keyZ
  { 13, 0x0100070028 },    // enter
  { 27, 0x0100070029 },    // escape
  { 8, 0x010007002a },    // backspace
  { 9, 0x010007002b },    // tab
  { 32, 0x0000000020 },    // space
  { 189, 0x000000002d },    // minus
  { 187, 0x000000003d },    // equal
  { 219, 0x000000005b },    // bracketLeft
  { 221, 0x000000005d },    // bracketRight
  { 220, 0x000000005c },    // backslash
  { 186, 0x000000003b },    // semicolon
  { 222, 0x0000000027 },    // quote
  { 192, 0x0000000060 },    // backquote
  { 188, 0x000000002c },    // comma
  { 190, 0x000000002e },    // period
  { 191, 0x000000002f },    // slash
  { 20, 0x0100070039 },    // capsLock
  { 112, 0x010007003a },    // f1
  { 113, 0x010007003b },    // f2
  { 114, 0x010007003c },    // f3
  { 115, 0x010007003d },    // f4
  { 116, 0x010007003e },    // f5
  { 117, 0x010007003f },    // f6
  { 118, 0x0100070040 },    // f7
  { 119, 0x0100070041 },    // f8
  { 120, 0x0100070042 },    // f9
  { 121, 0x0100070043 },    // f10
  { 122, 0x0100070044 },    // f11
  { 123, 0x0100070045 },    // f12
  { 19, 0x0100070048 },    // pause
  { 45, 0x0100070049 },    // insert
  { 36, 0x010007004a },    // home
  { 46, 0x010007004c },    // delete
  { 35, 0x010007004d },    // end
  { 39, 0x010007004f },    // arrowRight
  { 37, 0x0100070050 },    // arrowLeft
  { 40, 0x0100070051 },    // arrowDown
  { 38, 0x0100070052 },    // arrowUp
  { 111, 0x0100070054 },    // numpadDivide
  { 106, 0x0100070055 },    // numpadMultiply
  { 109, 0x0100070056 },    // numpadSubtract
  { 107, 0x0100070057 },    // numpadAdd
  { 97, 0x0100070059 },    // numpad1
  { 98, 0x010007005a },    // numpad2
  { 99, 0x010007005b },    // numpad3
  { 100, 0x010007005c },    // numpad4
  { 101, 0x010007005d },    // numpad5
  { 102, 0x010007005e },    // numpad6
  { 103, 0x010007005f },    // numpad7
  { 104, 0x0100070060 },    // numpad8
  { 105, 0x0100070061 },    // numpad9
  { 96, 0x0100070062 },    // numpad0
  { 110, 0x0100070063 },    // numpadDecimal
  { 146, 0x0100070067 },    // numpadEqual
  { 124, 0x0100070068 },    // f13
  { 125, 0x0100070069 },    // f14
  { 126, 0x010007006a },    // f15
  { 127, 0x010007006b },    // f16
  { 128, 0x010007006c },    // f17
  { 129, 0x010007006d },    // f18
  { 130, 0x010007006e },    // f19
  { 131, 0x010007006f },    // f20
  { 132, 0x0100070070 },    // f21
  { 133, 0x0100070071 },    // f22
  { 134, 0x0100070072 },    // f23
  { 135, 0x0100070073 },    // f24
  { 47, 0x0100070075 },    // help
  { 41, 0x0100070077 },    // select
  { 28, 0x010007008a },    // convert
  { 162, 0x01000700e0 },    // controlLeft
  { 160, 0x01000700e1 },    // shiftLeft
  { 164, 0x01000700e2 },    // altLeft
  { 91, 0x01000700e3 },    // metaLeft
  { 163, 0x01000700e4 },    // controlRight
  { 161, 0x01000700e5 },    // shiftRight
  { 165, 0x01000700e6 },    // altRight
  { 92, 0x01000700e7 },    // metaRight
  { 178, 0x01000c00b7 },    // mediaStop
  { 179, 0x01000c00cd },    // mediaPlayPause
  { 180, 0x01000c018a },    // launchMail
  { 183, 0x01000c0192 },    // launchApp2
  { 182, 0x01000c0194 },    // launchApp1
  { 42, 0x01000c0208 },    // print
  { 170, 0x01000c0221 },    // browserSearch
  { 172, 0x01000c0223 },    // browserHome
  { 166, 0x01000c0224 },    // browserBack
  { 167, 0x01000c0225 },    // browserForward
  { 169, 0x01000c0226 },    // browserStop
  { 168, 0x01000c0227 },    // browserRefresh
  { 171, 0x01000c022a },    // browserFavorites
};

/// A map of GLFW key codes which have printable representations, but appear
/// on the number pad. Used to provide different key objects for keys like
/// KEY_EQUALS and NUMPAD_EQUALS.
const std::map<int, uint64_t> g_windows_numpad_map = {
  { 0x0000e035, 0x0100070054 },    // numpadDivide
  { 0x00000037, 0x0100070055 },    // numpadMultiply
  { 0x0000004a, 0x0100070056 },    // numpadSubtract
  { 0x0000004e, 0x0100070057 },    // numpadAdd
  { 0x0000004f, 0x0100070059 },    // numpad1
  { 0x00000050, 0x010007005a },    // numpad2
  { 0x00000051, 0x010007005b },    // numpad3
  { 0x0000004b, 0x010007005c },    // numpad4
  { 0x0000004c, 0x010007005d },    // numpad5
  { 0x0000004d, 0x010007005e },    // numpad6
  { 0x00000047, 0x010007005f },    // numpad7
  { 0x00000048, 0x0100070060 },    // numpad8
  { 0x00000049, 0x0100070061 },    // numpad9
  { 0x00000052, 0x0100070062 },    // numpad0
  { 0x00000053, 0x0100070063 },    // numpadDecimal
  { 0x00000059, 0x0100070067 },    // numpadEqual
  { 0x0000007e, 0x0100070085 },    // numpadComma
};
