// Copyright 2014 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <map>

// DO NOT EDIT -- DO NOT EDIT -- DO NOT EDIT
// This file is generated by flutter/flutter@dev/tools/gen_keycodes/bin/gen_keycodes.dart and
// should not be edited directly.
//
// Edit the template dev/tools/gen_keycodes/data/keyboard_map_glfw_cc.tmpl instead.
// See dev/tools/gen_keycodes/README.md for more information.

/// Maps GLFW-specific key codes to the matching [LogicalKeyboardKey].
const std::map<int, int> g_glfw_to_logical_key = {
  { 65, 0x0000000061 },    // keyA
  { 66, 0x0000000062 },    // keyB
  { 67, 0x0000000063 },    // keyC
  { 68, 0x0000000064 },    // keyD
  { 69, 0x0000000065 },    // keyE
  { 70, 0x0000000066 },    // keyF
  { 71, 0x0000000067 },    // keyG
  { 72, 0x0000000068 },    // keyH
  { 73, 0x0000000069 },    // keyI
  { 74, 0x000000006a },    // keyJ
  { 75, 0x000000006b },    // keyK
  { 76, 0x000000006c },    // keyL
  { 77, 0x000000006d },    // keyM
  { 78, 0x000000006e },    // keyN
  { 79, 0x000000006f },    // keyO
  { 80, 0x0000000070 },    // keyP
  { 81, 0x0000000071 },    // keyQ
  { 82, 0x0000000072 },    // keyR
  { 83, 0x0000000073 },    // keyS
  { 84, 0x0000000074 },    // keyT
  { 85, 0x0000000075 },    // keyU
  { 86, 0x0000000076 },    // keyV
  { 87, 0x0000000077 },    // keyW
  { 88, 0x0000000078 },    // keyX
  { 89, 0x0000000079 },    // keyY
  { 90, 0x000000007a },    // keyZ
  { 49, 0x0000000031 },    // digit1
  { 50, 0x0000000032 },    // digit2
  { 51, 0x0000000033 },    // digit3
  { 52, 0x0000000034 },    // digit4
  { 53, 0x0000000035 },    // digit5
  { 54, 0x0000000036 },    // digit6
  { 55, 0x0000000037 },    // digit7
  { 56, 0x0000000038 },    // digit8
  { 57, 0x0000000039 },    // digit9
  { 48, 0x0000000030 },    // digit0
  { 257, 0x0100070028 },    // enter
  { 256, 0x0100070029 },    // escape
  { 259, 0x010007002a },    // backspace
  { 258, 0x010007002b },    // tab
  { 32, 0x0000000020 },    // space
  { 45, 0x000000002d },    // minus
  { 61, 0x000000003d },    // equal
  { 91, 0x000000005b },    // bracketLeft
  { 93, 0x000000005d },    // bracketRight
  { 92, 0x000000005c },    // backslash
  { 59, 0x000000003b },    // semicolon
  { 39, 0x0000000027 },    // quote
  { 96, 0x0000000060 },    // backquote
  { 44, 0x000000002c },    // comma
  { 46, 0x000000002e },    // period
  { 47, 0x000000002f },    // slash
  { 280, 0x0100070039 },    // capsLock
  { 290, 0x010007003a },    // f1
  { 291, 0x010007003b },    // f2
  { 292, 0x010007003c },    // f3
  { 293, 0x010007003d },    // f4
  { 294, 0x010007003e },    // f5
  { 295, 0x010007003f },    // f6
  { 296, 0x0100070040 },    // f7
  { 297, 0x0100070041 },    // f8
  { 298, 0x0100070042 },    // f9
  { 299, 0x0100070043 },    // f10
  { 300, 0x0100070044 },    // f11
  { 301, 0x0100070045 },    // f12
  { 283, 0x0100070046 },    // printScreen
  { 284, 0x0100070048 },    // pause
  { 260, 0x0100070049 },    // insert
  { 268, 0x010007004a },    // home
  { 266, 0x010007004b },    // pageUp
  { 261, 0x010007004c },    // delete
  { 269, 0x010007004d },    // end
  { 267, 0x010007004e },    // pageDown
  { 262, 0x010007004f },    // arrowRight
  { 263, 0x0100070050 },    // arrowLeft
  { 264, 0x0100070051 },    // arrowDown
  { 265, 0x0100070052 },    // arrowUp
  { 282, 0x0100070053 },    // numLock
  { 331, 0x0100070054 },    // numpadDivide
  { 332, 0x0100070055 },    // numpadMultiply
  { 334, 0x0100070057 },    // numpadAdd
  { 335, 0x0100070058 },    // numpadEnter
  { 321, 0x0100070059 },    // numpad1
  { 322, 0x010007005a },    // numpad2
  { 323, 0x010007005b },    // numpad3
  { 324, 0x010007005c },    // numpad4
  { 325, 0x010007005d },    // numpad5
  { 326, 0x010007005e },    // numpad6
  { 327, 0x010007005f },    // numpad7
  { 328, 0x0100070060 },    // numpad8
  { 329, 0x0100070061 },    // numpad9
  { 320, 0x0100070062 },    // numpad0
  { 330, 0x0100070063 },    // numpadDecimal
  { 348, 0x0100070065 },    // contextMenu
  { 336, 0x0100070067 },    // numpadEqual
  { 302, 0x0100070068 },    // f13
  { 303, 0x0100070069 },    // f14
  { 304, 0x010007006a },    // f15
  { 305, 0x010007006b },    // f16
  { 306, 0x010007006c },    // f17
  { 307, 0x010007006d },    // f18
  { 308, 0x010007006e },    // f19
  { 309, 0x010007006f },    // f20
  { 310, 0x0100070070 },    // f21
  { 311, 0x0100070071 },    // f22
  { 312, 0x0100070072 },    // f23
  { 341, 0x01000700e0 },    // controlLeft
  { 340, 0x01000700e1 },    // shiftLeft
  { 342, 0x01000700e2 },    // altLeft
  { 343, 0x01000700e3 },    // metaLeft
  { 345, 0x01000700e4 },    // controlRight
  { 344, 0x01000700e5 },    // shiftRight
  { 346, 0x01000700e6 },    // altRight
  { 347, 0x01000700e7 },    // metaRight
};

/// A map of GLFW key codes which have printable representations, but appear
/// on the number pad. Used to provide different key objects for keys like
/// KEY_EQUALS and NUMPAD_EQUALS.
const std::map<int, int> g_glfw_numpad_map = {
  { 331, 0x0100070054 },    // numpadDivide
  { 332, 0x0100070055 },    // numpadMultiply
  { 334, 0x0100070057 },    // numpadAdd
  { 321, 0x0100070059 },    // numpad1
  { 322, 0x010007005a },    // numpad2
  { 323, 0x010007005b },    // numpad3
  { 324, 0x010007005c },    // numpad4
  { 325, 0x010007005d },    // numpad5
  { 326, 0x010007005e },    // numpad6
  { 327, 0x010007005f },    // numpad7
  { 328, 0x0100070060 },    // numpad8
  { 329, 0x0100070061 },    // numpad9
  { 320, 0x0100070062 },    // numpad0
  { 330, 0x0100070063 },    // numpadDecimal
  { 336, 0x0100070067 },    // numpadEqual
};
