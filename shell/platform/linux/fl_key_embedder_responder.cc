// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "flutter/shell/platform/linux/fl_key_embedder_responder.h"

#include <gtk/gtk.h>
#include <cinttypes>

#include "flutter/shell/platform/embedder/embedder.h"
#include "flutter/shell/platform/linux/fl_engine_private.h"
#include "flutter/shell/platform/linux/key_mapping.h"

namespace {
const uint64_t kAutogeneratedMask = 0x10000000000;

/**
 * The code prefix for keys from Linux which do not have a Unicode
 * representation.
 */
constexpr uint64_t kLinuxKeyIdPlane = 0x00600000000;

constexpr uint64_t kMicrosecondsPerMillisecond = 1000;

// Declare and define a private class to hold response data from the framework.
G_DECLARE_FINAL_TYPE(FlKeyEmbedderUserData,
                     fl_key_embedder_user_data,
                     FL,
                     KEY_EMBEDDER_USER_DATA,
                     GObject);

struct _FlKeyEmbedderUserData {
  GObject parent_instance;

  FlKeyEmbedderResponder* responder;
  FlKeyResponderAsyncCallback callback;
  gpointer user_data;
};

// Definition for FlKeyEmbedderUserData private class.
G_DEFINE_TYPE(FlKeyEmbedderUserData, fl_key_embedder_user_data, G_TYPE_OBJECT)

// Dispose method for FlKeyEmbedderUserData private class.
static void fl_key_embedder_user_data_dispose(GObject* object) {
  g_return_if_fail(FL_IS_KEY_EMBEDDER_USER_DATA(object));
  FlKeyEmbedderUserData* self = FL_KEY_EMBEDDER_USER_DATA(object);
  if (self->responder != nullptr) {
    g_object_remove_weak_pointer(
        G_OBJECT(self->responder),
        reinterpret_cast<gpointer*>(&(self->responder)));
    self->responder = nullptr;
  }
}

// Class initialization method for FlKeyEmbedderUserData private class.
static void fl_key_embedder_user_data_class_init(
    FlKeyEmbedderUserDataClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = fl_key_embedder_user_data_dispose;
}

// Instance initialization method for FlKeyEmbedderUserData private class.
static void fl_key_embedder_user_data_init(FlKeyEmbedderUserData* self) {}

// Creates a new FlKeyEmbedderUserData private class with a responder that
// created the request, a unique ID for tracking, and optional user data. Will
// keep a weak pointer to the responder.
static FlKeyEmbedderUserData* fl_key_embedder_user_data_new(
    FlKeyEmbedderResponder* responder,
    FlKeyResponderAsyncCallback callback,
    gpointer user_data) {
  FlKeyEmbedderUserData* self = FL_KEY_EMBEDDER_USER_DATA(
      g_object_new(fl_key_embedder_user_data_get_type(), nullptr));

  self->responder = responder;
  // Add a weak pointer so we can know if the key event responder disappeared
  // while the framework was responding.
  g_object_add_weak_pointer(G_OBJECT(responder),
                            reinterpret_cast<gpointer*>(&(self->responder)));
  self->callback = callback;
  self->user_data = user_data;
  return self;
}

}  // namespace

struct _FlKeyEmbedderResponder {
  GObject parent_instance;

  FlEngine* engine;

  // Stores pressed keys, mapping their Flutter physical key to Flutter logical
  // key.
  //
  // Both keys and values are directly stored uint64s.
  GHashTable* pressing_records;

  // A static map from XKB to Flutter's physical key code
  GHashTable* xkb_to_physical_key;

  // A static map from GTK keyval to Flutter's logical key code
  GHashTable* keyval_to_logical_key;

  gchar* character_to_free;
};

static void fl_key_embedder_responder_iface_init(
    FlKeyResponderInterface* iface);

G_DEFINE_TYPE_WITH_CODE(
    FlKeyEmbedderResponder,
    fl_key_embedder_responder,
    G_TYPE_OBJECT,
    G_IMPLEMENT_INTERFACE(FL_TYPE_KEY_RESPONDER,
                          fl_key_embedder_responder_iface_init))

static void fl_key_embedder_responder_handle_event(
    FlKeyResponder* responder,
    GdkEventKey* event,
    FlKeyResponderAsyncCallback callback,
    gpointer user_data);

static void fl_key_embedder_responder_iface_init(
    FlKeyResponderInterface* iface) {
  iface->handle_event = fl_key_embedder_responder_handle_event;
}

// Disposes of an FlKeyEmbedderResponder instance.
static void fl_key_embedder_responder_dispose(GObject* object) {
  FlKeyEmbedderResponder* self = FL_KEY_EMBEDDER_RESPONDER(object);

  g_clear_pointer(&self->pressing_records, g_hash_table_unref);
  g_clear_pointer(&self->xkb_to_physical_key, g_hash_table_unref);
  g_clear_pointer(&self->keyval_to_logical_key, g_hash_table_unref);
  if (self->character_to_free != nullptr) {
    g_free(self->character_to_free);
  }

  G_OBJECT_CLASS(fl_key_embedder_responder_parent_class)->dispose(object);
}

// Initializes the FlKeyEmbedderResponder class methods.
static void fl_key_embedder_responder_class_init(
    FlKeyEmbedderResponderClass* klass) {
  G_OBJECT_CLASS(klass)->dispose = fl_key_embedder_responder_dispose;
}

// Initializes an FlKeyEmbedderResponder instance.
static void fl_key_embedder_responder_init(FlKeyEmbedderResponder* self) {}

// Creates a new FlKeyEmbedderResponder instance, with a messenger used to send
// messages to the framework, an FlTextInputPlugin used to handle key events
// that the framework doesn't handle. Mainly for testing purposes, it also takes
// an optional callback to call when a response is received, and an optional
// embedder name to use when sending messages.
FlKeyEmbedderResponder* fl_key_embedder_responder_new(FlEngine* engine) {
  g_return_val_if_fail(FL_IS_ENGINE(engine), nullptr);

  FlKeyEmbedderResponder* self = FL_KEY_EMBEDDER_RESPONDER(
      g_object_new(fl_key_embedder_responder_get_type(), nullptr));

  self->engine = engine;
  // Add a weak pointer so we can know if the key event responder disappeared
  // while the framework was responding.
  g_object_add_weak_pointer(G_OBJECT(engine),
                            reinterpret_cast<gpointer*>(&(self->engine)));

  self->pressing_records = g_hash_table_new(g_direct_hash, g_direct_equal);
  self->xkb_to_physical_key = g_hash_table_new(g_direct_hash, g_direct_equal);
  initialize_xkb_to_physical_key(self->xkb_to_physical_key);
  self->keyval_to_logical_key = g_hash_table_new(g_direct_hash, g_direct_equal);
  initialize_gtk_keyval_to_logical_key(self->keyval_to_logical_key);
  self->character_to_free = nullptr;

  return self;
}

static uint64_t lookup_hash_table(GHashTable* table, uint64_t key) {
  return gpointer_to_uint64(
      g_hash_table_lookup(table, uint64_to_gpointer(key)));
}

static uint64_t event_to_physical_key(const GdkEventKey* event,
                                      GHashTable* table) {
  uint64_t record = lookup_hash_table(table, event->hardware_keycode);
  if (record != 0) {
    return record;
  }
  // Auto-generate key
  return kAutogeneratedMask | kLinuxKeyIdPlane | event->hardware_keycode;
}

static uint64_t to_lower(uint64_t n) {
  constexpr uint64_t lower_a = 0x61;
  constexpr uint64_t upper_a = 0x41;
  constexpr uint64_t upper_z = 0x5a;

  constexpr uint64_t lower_a_grave = 0xe0;
  constexpr uint64_t upper_a_grave = 0xc0;
  constexpr uint64_t upper_thorn = 0xde;
  constexpr uint64_t division = 0xf7;

  if (n >= upper_a && n <= upper_z) {
    return n - upper_a + lower_a;
  }

  if (n >= upper_a_grave && n <= upper_thorn && n != division) {
    return n - upper_a_grave + lower_a_grave;
  }

  return n;
}

static uint64_t event_to_logical_key(const GdkEventKey* event,
                                     GHashTable* table) {
  guint keyval = event->keyval;
  uint64_t record = lookup_hash_table(table, keyval);
  if (record != 0) {
    return record;
  }
  // EASCII range
  if (keyval < 256) {
    return to_lower(keyval);
  }
  // Auto-generate key
  return kAutogeneratedMask | kLinuxKeyIdPlane | keyval;
}

static uint64_t event_to_timestamp(const GdkEventKey* event) {
  return kMicrosecondsPerMillisecond * (double)event->time;
}

// Returns a newly accocated UTF-8 string from event->keyval that must be
// freed later with g_free().
static char* event_to_character(const GdkEventKey* event) {
  gunichar unicodeChar = gdk_keyval_to_unicode(event->keyval);
  glong items_written;
  gchar* result = g_ucs4_to_utf8(&unicodeChar, 1, NULL, &items_written, NULL);
  if (items_written == 0) {
    if (result != NULL)
      g_free(result);
    return nullptr;
  }
  return result;
}

// Handles a response from the framework to a key event sent to the framework
// earlier.
static void handle_response(bool handled, gpointer user_data) {
  g_autoptr(FlKeyEmbedderUserData) data = FL_KEY_EMBEDDER_USER_DATA(user_data);

  // Return if the weak pointer has been destroyed.
  if (data->responder == nullptr) {
    return;
  }

  // Return if callback is not requested (happens for synthesized events).
  if (data->callback == nullptr) {
    return;
  }

  data->callback(handled, data->user_data);
}

// Sends a key event to the framework.
static void fl_key_embedder_responder_handle_event(
    FlKeyResponder* responder,
    GdkEventKey* event,
    FlKeyResponderAsyncCallback callback,
    gpointer user_data) {
  FlKeyEmbedderResponder* self = FL_KEY_EMBEDDER_RESPONDER(responder);
  g_return_if_fail(event != nullptr);
  g_return_if_fail(callback != nullptr);

  printf("===START=== state %d\n", event->state);
  if (self->character_to_free != nullptr) {
    g_free(self->character_to_free);
    self->character_to_free = nullptr;
  }
  uint64_t physical_key =
      event_to_physical_key(event, self->xkb_to_physical_key);
  uint64_t logical_key =
      event_to_logical_key(event, self->keyval_to_logical_key);
  bool is_physical_down = event->type == GDK_KEY_PRESS;

  uint64_t last_logical_record =
      lookup_hash_table(self->pressing_records, physical_key);
  uint64_t next_logical_record = is_physical_down ? last_logical_record : 0;

  char* character_to_free = nullptr;

  printf("last %lu next %lu down %d type %d\n", last_logical_record,
         next_logical_record, is_physical_down, event->type);
  fflush(stdout);

  FlutterKeyEvent out_event;
  out_event.struct_size = sizeof(out_event);
  out_event.type = kFlutterKeyEventTypeDown;
  out_event.timestamp = event_to_timestamp(event);
  out_event.physical = physical_key;
  out_event.logical = logical_key;
  out_event.character = character_to_free;
  out_event.synthesized = false;

  if (is_physical_down) {
    character_to_free = event_to_character(event);  // Might be null
    out_event.character = character_to_free;

    if (last_logical_record) {
      // GTK doesn't report repeat events separatedly, therefore we can't
      // distinguish a repeat event from a down event after a missed up event.
      out_event.type = kFlutterKeyEventTypeRepeat;
      out_event.logical = last_logical_record;
    } else {
      out_event.type = kFlutterKeyEventTypeDown;
      out_event.logical = logical_key;
    }
  } else {  // is_physical_down false
    out_event.character = nullptr;
    out_event.type = kFlutterKeyEventTypeUp;
    out_event.logical = logical_key;
  }

  FlKeyEmbedderUserData* response_data =
      fl_key_embedder_user_data_new(self, callback, user_data);

  fl_engine_send_key_event(self->engine, &out_event, handle_response,
                           response_data);
}
